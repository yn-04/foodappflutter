import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';

class IngredientTranslator {
  /// üìå Dictionary ‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (static)
  static final Map<String, String> _translationMap = {
    // üçö ‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï
    '‡∏Ç‡πâ‡∏≤‡∏ß': 'rice',
    '‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥': 'jasmine rice',
    '‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢': 'cooked rice',
    '‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≤‡∏£': 'uncooked rice',
    '‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß': 'rice noodles',
    '‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏°‡∏µ‡πà': 'vermicelli',
    '‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô': 'glass noodles',
    '‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á': 'bread',
    '‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á': 'potato',
    '‡∏°‡∏±‡∏ô‡πÄ‡∏ó‡∏®': 'sweet potato',
    '‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á': 'pumpkin',
    '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î': 'corn',

    // ü•© ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå
    '‡πÑ‡∏Å‡πà': 'chicken',
    '‡∏ô‡πà‡∏≠‡∏á‡πÑ‡∏Å‡πà': 'chicken drumstick',
    '‡∏õ‡∏µ‡∏Å‡πÑ‡∏Å‡πà': 'chicken wings',
    '‡∏´‡∏°‡∏π': 'pork',
    '‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö': 'ground pork',
    '‡∏´‡∏°‡∏π‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô': 'pork belly',
    '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠': 'beef',
    '‡∏Å‡∏∏‡πâ‡∏á': 'shrimp',
    '‡∏õ‡∏•‡∏≤‡∏´‡∏°‡∏∂‡∏Å': 'squid',
    '‡∏õ‡∏•‡∏≤': 'fish',
    '‡∏õ‡∏•‡∏≤‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô': 'salmon',
    '‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô': 'salmon',
    '‡πÅ‡∏ã‡∏•‡∏°‡πà‡∏≠‡∏ô': 'salmon',
    '‡∏õ‡∏•‡∏≤‡∏ó‡∏π': 'mackerel',
    '‡∏õ‡∏•‡∏≤‡∏ô‡∏¥‡∏•': 'tilapia',
    '‡∏õ‡∏•‡∏≤‡∏ó‡∏π‡∏ô‡πà‡∏≤': 'tuna',
    '‡∏õ‡∏π': 'crab',
    '‡∏´‡∏≠‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏†‡∏π‡πà': 'mussels',
    '‡∏´‡∏≠‡∏¢‡πÅ‡∏Ñ‡∏£‡∏á': 'cockles',
    '‡πÑ‡∏Ç‡πà': 'egg',
    '‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà': 'egg',
    '‡πÑ‡∏Ç‡πà‡πÄ‡∏õ‡πá‡∏î': 'duck egg',

    // ü•¶ ‡∏ú‡∏±‡∏Å
    '‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤': 'holy basil',
    '‡πÇ‡∏´‡∏£‡∏∞‡∏û‡∏≤': 'thai basil',
    '‡∏ú‡∏±‡∏Å‡∏ä‡∏µ': 'coriander',
    '‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤': 'chinese kale',
    '‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏Ç‡∏≤‡∏ß': 'napa cabbage',
    '‡∏Å‡∏∞‡∏´‡∏•‡πà‡∏≥‡∏õ‡∏•‡∏µ': 'cabbage',
    '‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ': 'broccoli',
    '‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó': 'carrot',
    '‡∏´‡∏≠‡∏°‡πÉ‡∏´‡∏ç‡πà': 'onion',
    '‡∏´‡∏≠‡∏°‡πÅ‡∏î‡∏á': 'shallot',
    '‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°': 'garlic',
    '‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®': 'tomato',
    '‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤': 'cucumber',
    '‡∏ñ‡∏±‡πà‡∏ß‡∏ù‡∏±‡∏Å‡∏¢‡∏≤‡∏ß': 'yardlong beans',
    '‡∏ñ‡∏±‡πà‡∏ß‡∏á‡∏≠‡∏Å': 'bean sprouts',
    '‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á': 'peanut',
    '‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á‡∏Ñ‡∏±‡πà‡∏ß': 'roasted peanut',
    '‡∏ñ‡∏±‡πà‡∏ß‡∏Ñ‡∏±‡πà‡∏ß': 'roasted peanut',
    '‡πÄ‡∏´‡πá‡∏î‡∏ü‡∏≤‡∏á': 'straw mushroom',
    '‡πÄ‡∏´‡πá‡∏î‡∏´‡∏≠‡∏°': 'shiitake mushroom',
    '‡πÄ‡∏´‡πá‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏≠‡∏á': 'enoki mushroom',
    '‡∏ü‡∏±‡∏Å': 'winter melon',
    '‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏õ‡∏£‡∏≤‡∏∞': 'thai eggplant',
    '‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡∏¢‡∏≤‡∏ß': 'eggplant',

    // üå∂Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏®/‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£
    '‡∏û‡∏£‡∏¥‡∏Å': 'chili',
    '‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏î‡∏á': 'red chili',
    '‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß': 'green chili',
    '‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏´‡πâ‡∏á': 'dried chili',
    '‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢': 'pepper',
    '‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ': 'lemongrass',
    '‡∏Ç‡πà‡∏≤': 'galangal',
    '‡πÉ‡∏ö‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î': 'kaffir lime leaves',
    '‡∏°‡∏∞‡∏ô‡∏≤‡∏ß': 'lime',
    '‡∏Ç‡∏¥‡∏á': 'ginger',

    // ü•´ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™
    '‡πÄ‡∏ï‡πâ‡∏≤‡πÄ‡∏à‡∏µ‡πâ‡∏¢‡∏ß': 'soybean paste',
    '‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤': 'fish sauce',
    '‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß': 'soy sauce',
    '‡∏ã‡∏≠‡∏™‡∏´‡∏≠‡∏¢‡∏ô‡∏≤‡∏á‡∏£‡∏°': 'oyster sauce',
    '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•': 'sugar',
    '‡∏Å‡∏∞‡∏ó‡∏¥': 'coconut milk',
    '‡∏ô‡∏°‡∏™‡∏î': 'milk',
    '‡∏ô‡∏°‡∏Ç‡πâ‡∏ô‡∏´‡∏ß‡∏≤‡∏ô': 'condensed milk',
    '‡πÄ‡∏ô‡∏¢': 'butter',
    '‡πÄ‡∏Å‡∏•‡∏∑‡∏≠': 'salt',
    '‡∏ä‡∏µ‡∏™': 'cheese',
    '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô': 'oil',
  };

  /// Precomputed map with Thai diacritics stripped from keys for robust matching
  static final Map<String, String> _strippedKeyMap = {
    for (final e in _translationMap.entries)
      _stripThaiMarks(e.key): e.value,
  };

  /// üìå Cache (‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å RapidAPI)
  static final Map<String, String> _learnedCache = {};

  static const _prefsKey = 'ingredient_translator_cache';

  /// ‡πÇ‡∏´‡∏•‡∏î cache ‡∏à‡∏≤‡∏Å SharedPreferences
  static Future<void> loadCache() async {
    final prefs = await SharedPreferences.getInstance();
    final map = prefs.getStringList(_prefsKey) ?? [];
    for (final entry in map) {
      final parts = entry.split('::');
      if (parts.length == 2) {
        _learnedCache[parts[0]] = parts[1];
      }
    }
    debugPrint("üóÇÔ∏è Loaded ${_learnedCache.length} learned mappings");
  }

  /// ‡πÄ‡∏ã‡∏ü cache ‡∏•‡∏á SharedPreferences
  static Future<void> saveCache() async {
    final prefs = await SharedPreferences.getInstance();
    final list = _learnedCache.entries
        .map((e) => "${e.key}::${e.value}")
        .toList();
    await prefs.setStringList(_prefsKey, list);
  }

  /// ‡πÅ‡∏õ‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
  static String translate(String name) {
    final trimmed = name.trim();
    final normalized = _stripThaiMarks(trimmed.toLowerCase());

    if (_learnedCache.containsKey(normalized)) {
      return _learnedCache[normalized]!;
    }

    if (_translationMap.containsKey(normalized)) {
      return _translationMap[normalized]!;
    }

    // Try stripped-key exact/substring match
    if (_strippedKeyMap.containsKey(normalized)) {
      return _strippedKeyMap[normalized]!;
    }

    for (final entry in _strippedKeyMap.entries) {
      if (normalized.contains(entry.key)) return entry.value;
    }

    if (_containsThai(trimmed)) {
      final romanized = _romanizeThai(trimmed);
      if (romanized.isNotEmpty) {
        return romanized;
      }
    }

    return name;
  }

  /// ‡πÅ‡∏õ‡∏•‡∏•‡∏¥‡∏™‡∏ï‡πå
  static List<String> translateList(List<String> names) {
    return names.map(translate).toList();
  }

  /// Auto-learn mapping ‡∏à‡∏≤‡∏Å RapidAPI
  static Future<void> learnMapping(String original, String suggested) async {
    final key = _stripThaiMarks(original.trim().toLowerCase());
    final value = suggested.trim().toLowerCase();

    bool containsDigit(String s) => RegExp(r"[0-9]").hasMatch(s);
    final noisyWords = {
      'ounces','ounce','oz','cup','cups','tbsp','tablespoon','tsp','teaspoon',
      'g','kg','ml','l','slices','slice','for','garnish','carton','package','pack'
    };
    bool hasNoisyWord(String s) {
      final words = s.split(RegExp(r"\s+"));
      for (final w in words) {
        if (noisyWords.contains(w)) return true;
      }
      return false;
    }

    final tooLong = key.length > 40 || value.length > 40;
    final tooManyWords =
        key.split(RegExp(r"\s+")).length > 5 || value.split(RegExp(r"\s+")).length > 5;

    if (containsDigit(key) ||
        containsDigit(value) ||
        hasNoisyWord(key) ||
        hasNoisyWord(value) ||
        tooLong ||
        tooManyWords) {
      debugPrint("üß† Skip learning noisy mapping: $original ‚Üí $suggested");
      return;
    }

    _learnedCache[key] = value;
    debugPrint("üß† Learned mapping: $original ‚Üí $suggested");
    await saveCache();
  }

  /// Remove Thai tone/diacritic marks to make matching robust
  static String _stripThaiMarks(String input) {
    // Remove: 31 (mai han-akat), 34-3A (vowels), 47-4E (combining marks)
    return input.replaceAll(RegExp(r"[\u0E31\u0E34-\u0E3A\u0E47-\u0E4E]"), "");
  }

  static bool _containsThai(String input) {
    return RegExp(r"[\u0E00-\u0E7F]").hasMatch(input);
  }

  static String _romanizeThai(String input) {
    final buffer = StringBuffer();
    for (var i = 0; i < input.length; i++) {
      final char = input[i];
      final mapped = _thaiToLatin[char];
      if (mapped != null) {
        buffer.write(mapped);
      } else if (char.codeUnitAt(0) <= 127) {
        buffer.write(char);
      }
    }
    return buffer.toString().replaceAll(RegExp(r"\s+"), ' ').trim();
  }

  static const Map<String, String> _thaiToLatin = {
    '‡∏Å': 'k',
    '‡∏Ç': 'kh',
    '‡∏É': 'kh',
    '‡∏Ñ': 'kh',
    '‡∏Ö': 'kh',
    '‡∏Ü': 'kh',
    '‡∏á': 'ng',
    '‡∏à': 'ch',
    '‡∏â': 'ch',
    '‡∏ä': 'ch',
    '‡∏ã': 's',
    '‡∏å': 'ch',
    '‡∏ç': 'y',
    '‡∏é': 'd',
    '‡∏è': 't',
    '‡∏ê': 'th',
    '‡∏ë': 'th',
    '‡∏í': 'th',
    '‡∏ì': 'n',
    '‡∏î': 'd',
    '‡∏ï': 't',
    '‡∏ñ': 'th',
    '‡∏ó': 'th',
    '‡∏ò': 'th',
    '‡∏ô': 'n',
    '‡∏ö': 'b',
    '‡∏õ': 'p',
    '‡∏ú': 'ph',
    '‡∏ù': 'f',
    '‡∏û': 'ph',
    '‡∏ü': 'f',
    '‡∏†': 'ph',
    '‡∏°': 'm',
    '‡∏¢': 'y',
    '‡∏£': 'r',
    '‡∏§': 'rue',
    '‡∏•': 'l',
    '‡∏¶': 'lue',
    '‡∏ß': 'w',
    '‡∏®': 's',
    '‡∏©': 's',
    '‡∏™': 's',
    '‡∏´': 'h',
    '‡∏¨': 'l',
    '‡∏≠': 'o',
    '‡∏Æ': 'h',
    '‡∏∞': 'a',
    '‡∏≤': 'a',
    '‡∏≥': 'am',
    '‡∏¥': 'i',
    '‡∏µ': 'i',
    '‡∏∂': 'ue',
    '‡∏∑': 'ue',
    '‡∏∏': 'u',
    '‡∏π': 'u',
    '‡πÄ': 'e',
    '‡πÅ': 'ae',
    '‡πÇ': 'o',
    '‡πÉ': 'ai',
    '‡πÑ': 'ai',
    '‡πÖ': 'a',
    '‡πÜ': '',
    '‡πá': '',
    '‡πà': '',
    '‡πâ': '',
    '‡πä': '',
    '‡πã': '',
    '‡πå': '',
    '‡∏∫': '',
    '‡∏Ø': '',
    '‡∏ø': 'baht',
    ' ': ' ',
  };
}
