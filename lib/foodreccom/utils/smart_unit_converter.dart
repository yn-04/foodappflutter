// lib/foodreccom/utils/smart_unit_converter.dart
import 'dart:math' as math;

import 'package:my_app/common/measurement_constants.dart';
import 'package:my_app/common/smart_unit_converter.dart' as piece_converter;
import '../constants/unit_conversions.dart';
import '../services/unit_conversion_service.dart'; // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Spoonacular (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
import 'ingredient_translator.dart';

class SmartUnitConverter {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô toCanonicalQuantity ‡πÄ‡∏î‡∏¥‡∏°
  static CanonicalQuantity toCanonicalQuantity(
    double amount,
    String unit,
    String ingredientName,
  ) {
    final lower = unit.trim().toLowerCase();

    if (weightUnits.containsKey(lower)) {
      return CanonicalQuantity(amount * weightUnits[lower]!, 'gram');
    }
    if (volumeUnits.containsKey(lower)) {
      return CanonicalQuantity(amount * volumeUnits[lower]!, 'milliliter');
    }
    if (pieceUnits.contains(lower)) {
      return CanonicalQuantity(amount, 'piece');
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô gram ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô (‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ)
    return CanonicalQuantity(amount, 'gram');
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏±‡∏á (‡∏Å‡∏£‡∏±‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£)
  /// ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
  static Future<CanonicalQuantity?> convertRecipeUnitToInventoryUnit({
    required String ingredientName,
    required double recipeAmount,
    required String recipeUnit,
  }) async {
    final conversionService = UnitConversionService();
    final lowerRecipeUnit = recipeUnit.trim().toLowerCase();
    final lowerIngredientName = ingredientName.trim().toLowerCase();

    // ü•ö ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏ä‡∏¥‡πâ‡∏ô ‚Äì ‡πÉ‡∏ä‡πâ rule ‡∏à‡∏≤‡∏Å common smart converter (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏Ç‡πà/‡∏ü‡∏≠‡∏á)
    final pieceRule = piece_converter.SmartUnitConverter.pieceRuleFor(
      lowerIngredientName,
      lowerRecipeUnit,
    );

    if (pieceRule != null) {
      if (pieceRule.displayUnit.trim() == '‡∏ü‡∏≠‡∏á') {
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ü‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÜ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API)
        return CanonicalQuantity(recipeAmount, '‡∏ü‡∏≠‡∏á');
      }
      final grams = piece_converter.SmartUnitConverter.gramsFromPiece(
        recipeAmount,
        lowerRecipeUnit,
        lowerIngredientName,
      );
      if (grams != null && grams > 0) {
        return CanonicalQuantity(grams, 'gram');
      }
    }

    if (piece_converter.SmartUnitConverter.isPieceUnit(lowerRecipeUnit)) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ä‡∏¥‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ rule ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏±‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
      final grams = piece_converter.SmartUnitConverter.gramsFromPiece(
        recipeAmount,
        lowerRecipeUnit,
        lowerIngredientName,
      );
      if (grams != null && grams > 0) {
        return CanonicalQuantity(grams, 'gram');
      }
      // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö 1 ‡∏ä‡∏¥‡πâ‡∏ô = 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
      return CanonicalQuantity(recipeAmount, 'piece');
    }

    // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ mapping ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡πâ‡∏≠‡∏ô‡πÅ‡∏Å‡∏á, ‡∏Å‡∏≥‡∏°‡∏∑‡∏≠)
    final manualRule = _manualUnitRules[lowerRecipeUnit];
    if (manualRule != null) {
      return CanonicalQuantity(
        recipeAmount * manualRule.multiplier,
        manualRule.canonicalUnit,
      );
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (Weight to Weight, Volume to Volume)
    if (weightUnits.containsKey(lowerRecipeUnit)) {
      final grams = recipeAmount * weightUnits[lowerRecipeUnit]!;
      return CanonicalQuantity(grams, 'gram');
    }
    if (volumeUnits.containsKey(lowerRecipeUnit)) {
      final milliliters = recipeAmount * volumeUnits[lowerRecipeUnit]!;
      return CanonicalQuantity(milliliters, 'milliliter');
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö serving ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà Spoonacular ‡πÉ‡∏ä‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    if (_servingLikeUnits.contains(lowerRecipeUnit)) {
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ API ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏±‡∏°‡∏Å‡πà‡∏≠‡∏ô
      final converted = await conversionService.convertAmount(
        ingredientName: ingredientName,
        sourceAmount: recipeAmount,
        sourceUnit: recipeUnit,
        targetUnit: 'grams',
      );
      if (converted != null && converted > 0) {
        return CanonicalQuantity(converted, 'gram');
      }
    }

    if (_shouldSkipDynamicConversion(lowerIngredientName)) {
      return null;
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÄ‡∏ä‡πà‡∏ô cup -> gram) ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API
    // ‡∏•‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 'gram' ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ network key)
    double? convertedAmount = await _safeConvert(
      service: conversionService,
      ingredientName: ingredientName,
      sourceAmount: recipeAmount,
      sourceUnit: recipeUnit,
      targetUnit: 'grams',
    );

    if (convertedAmount != null) {
      return CanonicalQuantity(convertedAmount, 'gram');
    }

    // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô gram ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 'ml'
    convertedAmount = await _safeConvert(
      service: conversionService,
      ingredientName: ingredientName,
      sourceAmount: recipeAmount,
      sourceUnit: recipeUnit,
      targetUnit: 'ml',
    );

    if (convertedAmount != null) {
      return CanonicalQuantity(convertedAmount, 'milliliter');
    }

    final fallback = toCanonicalQuantity(
      recipeAmount,
      recipeUnit,
      ingredientName,
    );
    if (fallback.amount > 0) {
      return fallback;
    }
    return null; // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ (‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì 0)
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô convertCanonicalToUnit ‡πÄ‡∏î‡∏¥‡∏°
  static double convertCanonicalToUnit({
    required String canonicalUnit,
    required double canonicalAmount,
    required String targetUnit,
    required String ingredientName,
  }) {
    final lower = targetUnit.trim().toLowerCase();
    if (canonicalUnit == 'gram' && weightUnits.containsKey(lower)) {
      return canonicalAmount / weightUnits[lower]!;
    }
    if (canonicalUnit == 'milliliter' && volumeUnits.containsKey(lower)) {
      return canonicalAmount / volumeUnits[lower]!;
    }
    return canonicalAmount;
  }

  /// üî¢ ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏Å‡∏£‡∏±‡∏°/‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
  static double? densityForIngredient(String ingredientName) {
    final normalized = _normalizeForDensity(ingredientName);
    final translated = _normalizeForDensity(
      IngredientTranslator.translate(ingredientName),
    );

    for (final entry in _densityTable.entries) {
      final key = entry.key;
      if (normalized.contains(key) || translated.contains(key)) {
        return entry.value;
      }
    }
    return _densityTable['default'];
  }
}

class CanonicalQuantity {
  final double amount;
  final String unit; // 'gram', 'milliliter', 'piece', '‡∏ü‡∏≠‡∏á'
  const CanonicalQuantity(this.amount, this.unit);
}

/// üß≠ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ "‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü/‡∏ó‡∏µ‡πà" ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
const Set<String> _servingLikeUnits = {
  'serving',
  'servings',
  '‡∏ó‡∏µ‡πà',
  'portion',
  '‰ªΩ',
};

const Map<String, double> _densityTable = {
  'default': 1.0,
  'water': 1.0,
  '‡∏ô‡πâ‡∏≥': 1.0,
  '‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤': 1.0,
  'milk': 1.03,
  '‡∏ô‡∏°': 1.03,
  '‡∏ô‡∏°‡∏™‡∏î': 1.03,
  'coconut milk': 0.97,
  '‡∏Å‡∏∞‡∏ó‡∏¥': 0.97,
  'condensed milk': 1.3,
  '‡∏ô‡∏°‡∏Ç‡πâ‡∏ô‡∏´‡∏ß‡∏≤‡∏ô': 1.3,
  'sugar': 0.85,
  '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•': 0.85,
  '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ó‡∏£‡∏≤‡∏¢': 0.85,
  'brown sugar': 0.75,
  'icing sugar': 0.6,
  'salt': 1.2,
  'sea salt': 1.2,
  '‡πÄ‡∏Å‡∏•‡∏∑‡∏≠': 1.2,
  'soy sauce': 1.1,
  '‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß': 1.1,
  'fish sauce': 1.2,
  '‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤': 1.2,
  'oyster sauce': 1.09,
  '‡∏ã‡∏≠‡∏™‡∏´‡∏≠‡∏¢‡∏ô‡∏≤‡∏á‡∏£‡∏°': 1.09,
  'oil': 0.92,
  'vegetable oil': 0.92,
  'olive oil': 0.91,
  '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô': 0.92,
  '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏û‡∏∑‡∏ä': 0.92,
  '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏°‡∏∞‡∏Å‡∏≠‡∏Å': 0.91,
  'butter': 0.95,
  '‡πÄ‡∏ô‡∏¢': 0.95,
  'honey': 1.42,
  '‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á': 1.42,
  'flour': 0.53,
  '‡πÅ‡∏õ‡πâ‡∏á': 0.53,
  '‡πÅ‡∏õ‡πâ‡∏á‡∏™‡∏≤‡∏•‡∏µ': 0.53,
  'rice': 0.85,
  '‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≤‡∏£': 0.85,
  'garlic': 0.6,
  '‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°': 0.6,
  'onion': 0.85,
  '‡∏´‡∏≠‡∏°‡∏´‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà': 0.85,
};

String _normalizeForDensity(String value) =>
    value.trim().toLowerCase().replaceAll(RegExp(r'\s+'), ' ');

class _ManualUnitRule {
  final double multiplier;
  final String canonicalUnit;
  const _ManualUnitRule(this.multiplier, this.canonicalUnit);
}

const Map<String, _ManualUnitRule> _manualUnitRules = {
  '‡∏ä‡πâ‡∏≠‡∏ô‡πÅ‡∏Å‡∏á': _ManualUnitRule(
    MeasurementConstants.millilitersPerTablespoon,
    'milliliter',
  ),
  '‡∏ä‡πâ‡∏≠‡∏ô‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß': _ManualUnitRule(
    MeasurementConstants.millilitersPerTablespoon,
    'milliliter',
  ),
  '‡∏ä‡πâ‡∏≠‡∏ô‡∏ã‡∏∏‡∏õ': _ManualUnitRule(
    MeasurementConstants.millilitersPerTablespoon,
    'milliliter',
  ),
  '‡∏ä‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü': _ManualUnitRule(
    MeasurementConstants.millilitersPerTeaspoon,
    'milliliter',
  ),
  '‡∏ä‡πâ‡∏≠‡∏ô‡∏´‡∏ß‡∏≤‡∏ô': _ManualUnitRule(
    MeasurementConstants.millilitersPerTeaspoon,
    'milliliter',
  ),
  '‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤‡πÄ‡∏•‡πá‡∏Å': _ManualUnitRule(
    MeasurementConstants.millilitersPerTeaspoon,
    'milliliter',
  ),
  '‡πÅ‡∏Å‡πâ‡∏ß': _ManualUnitRule(MeasurementConstants.millilitersPerCup, 'milliliter'),
  '‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥': _ManualUnitRule(
    MeasurementConstants.millilitersPerCup,
    'milliliter',
  ),
  '‡∏ñ‡πâ‡∏ß‡∏¢‡∏ï‡∏ß‡∏á': _ManualUnitRule(
    MeasurementConstants.millilitersPerCup,
    'milliliter',
  ),
  '‡∏ó‡∏±‡∏û‡∏û‡∏µ': _ManualUnitRule(
    MeasurementConstants.millilitersPerCup / 2,
    'milliliter',
  ),
  '‡∏Å‡∏≥‡∏°‡∏∑‡∏≠': _ManualUnitRule(15, 'gram'),
  '‡∏´‡∏¢‡∏¥‡∏ö‡∏°‡∏∑‡∏≠': _ManualUnitRule(5, 'gram'),
  '‡∏ã‡∏≠‡∏á': _ManualUnitRule(12, 'gram'),
  '‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á': _ManualUnitRule(400, 'milliliter'),
};

bool _shouldSkipDynamicConversion(String lowerIngredientName) {
  if (lowerIngredientName.isEmpty) return true;
  if (lowerIngredientName.length > 80) return true;
  const ignoredKeywords = [
    '‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö',
    '‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö',
    '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ',
    'optional',
    '‡∏Å‡∏∞‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì',
    '‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á',
    '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü',
    'purefoods',
    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ',
    '‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
    '‡∏ï‡∏≤‡∏°‡πÉ‡∏à‡∏ä‡∏≠‡∏ö',
  ];
  for (final keyword in ignoredKeywords) {
    if (lowerIngredientName.contains(keyword)) {
      return true;
    }
  }
  return false;
}

Future<double?> _safeConvert({
  required UnitConversionService service,
  required String ingredientName,
  required double sourceAmount,
  required String sourceUnit,
  required String targetUnit,
}) async {
  try {
    final amount = await service.convertAmount(
      ingredientName: ingredientName,
      sourceAmount: sourceAmount,
      sourceUnit: sourceUnit,
      targetUnit: targetUnit,
    );
    if (amount == null) return null;
    if (!amount.isFinite) return null;
    if (amount <= 0) return null;
    if (targetUnit == 'grams') {
      return math.max(0, amount);
    }
    if (targetUnit == 'ml') {
      return math.max(0, amount);
    }
    return amount;
  } catch (e) {
    return null;
  }
}
