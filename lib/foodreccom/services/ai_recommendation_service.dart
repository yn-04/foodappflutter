// lib/services/ai_recommendation_service.dart
import 'dart:convert';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/ingredient_model.dart';
import '../models/recipe_model.dart';

class AIRecommendationService {
  static const String _apiKey = 'AIzaSyCy1cWTsLIlBDsY1BfaUpgUw5ArL_aSrc0';
  static const String _cacheKey = 'cached_recommendations';

  late final GenerativeModel _model;

  AIRecommendationService() {
    _model = GenerativeModel(
      model: 'gemini-1.5-flash',
      apiKey: _apiKey,
      generationConfig: GenerationConfig(
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 4096,
      ),
    );
  }

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å getDetailedRecommendations ‡πÄ‡∏õ‡πá‡∏ô getRecommendations
  Future<List<RecipeModel>> getRecommendations(
    List<IngredientModel> ingredients,
  ) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
      final cached = await _getCachedRecommendations(ingredients);
      if (cached != null) {
        print('üéØ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache');
        return cached;
      }

      print('ü§ñ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini AI...');

      final prompt = _buildDetailedPrompt(ingredients);
      final response = await _model
          .generateContent([Content.text(prompt)])
          .timeout(Duration(seconds: 45));

      if (response.text == null) {
        throw Exception('AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ');
      }

      final recipes = _parseDetailedResponse(response.text!);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache
      await _cacheRecommendations(ingredients, recipes);

      return recipes;
    } catch (e) {
      print('‚ùå AI Error: $e');
      return _getFallbackRecommendations(ingredients);
    }
  }

  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà method _buildDetailedPrompt ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå ai_recommendation_service.dart

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á prompt ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
  String _buildDetailedPrompt(List<IngredientModel> ingredients) {
    final nearExpiry = ingredients.where((i) => i.isNearExpiry).toList();
    final available = ingredients.where((i) => !i.isNearExpiry).toList();

    return '''
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏ü‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 3-5 ‡πÄ‡∏°‡∏ô‡∏π

**‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)**:
${nearExpiry.map((i) => '- ${i.name}: ${i.quantity} ${i.unit} (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${i.daysToExpiry} ‡∏ß‡∏±‡∏ô)').join('\n')}

**‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ**:
${available.map((i) => '- ${i.name}: ${i.quantity} ${i.unit}').join('\n')}

**‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**:

{
  "recommendations": [
    {
      "menu_name": "‡πÑ‡∏Å‡πà‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤",
      "description": "‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï ‡πÉ‡∏ä‡πâ‡πÑ‡∏Å‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
      "match_score": 95,
      "reason": "‡πÉ‡∏ä‡πâ‡πÑ‡∏Å‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î",
      "category": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å",
      "cooking_time": 20,
      "prep_time": 10,
      "difficulty": "‡∏á‡πà‡∏≤‡∏¢",
      "servings": 2,
      "ingredients": [
        {"name": "‡πÑ‡∏Å‡πà", "amount": 300, "unit": "‡∏Å‡∏£‡∏±‡∏°", "is_optional": false},
        {"name": "‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤", "amount": 100, "unit": "‡∏Å‡∏£‡∏±‡∏°", "is_optional": false},
        {"name": "‡∏û‡∏£‡∏¥‡∏Å‡∏Ç‡∏µ‡πâ‡∏´‡∏ô‡∏π", "amount": 5, "unit": "‡πÄ‡∏°‡πá‡∏î", "is_optional": true}
      ],
      "missing_ingredients": ["‡∏ã‡∏≠‡∏™‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™"],
      "steps": [
        {"step_number": 1, "instruction": "‡∏´‡∏±‡πà‡∏ô‡πÑ‡∏Å‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å", "time_minutes": 5, "tips": ["‡∏´‡∏±‡πà‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏Å‡πà"]},
        {"step_number": 2, "instruction": "‡∏ú‡∏±‡∏î‡πÑ‡∏Å‡πà‡∏à‡∏ô‡∏™‡∏∏‡∏Å", "time_minutes": 10, "tips": ["‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡πÅ‡∏£‡∏á"]}
      ],
      "nutrition": {"calories": 350, "protein": 25, "carbs": 15, "fat": 20, "fiber": 3, "sodium": 800},
      "tags": ["‡∏á‡πà‡∏≤‡∏¢", "‡πÑ‡∏ß", "‡πÑ‡∏ó‡∏¢"],
      "source": "‡∏™‡∏π‡∏ï‡∏£‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°",
      "source_url": ""
    }
  ]
}

**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å**:
- amount ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 5, 300, 1.5)
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏ä‡πà‡∏ß‡∏á (‡πÄ‡∏ä‡πà‡∏ô 5-10)
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å JSON
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
- ‡πÉ‡∏™‡πà‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å field ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
''';
  }
  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà method _parseDetailedResponse ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå ai_recommendation_service.dart

  List<RecipeModel> _parseDetailedResponse(String response) {
    try {
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î response
      String cleanJson = response
          .replaceAll('```json', '')
          .replaceAll('```', '')
          .trim();

      // ‡∏´‡∏≤ JSON object
      final jsonStart = cleanJson.indexOf('{');
      final jsonEnd = cleanJson.lastIndexOf('}') + 1;

      if (jsonStart != -1 && jsonEnd > jsonStart) {
        cleanJson = cleanJson.substring(jsonStart, jsonEnd);
      }

      // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ amount ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô range (‡πÄ‡∏ä‡πà‡∏ô 5-10)
      cleanJson = _fixJsonIssues(cleanJson);

      final Map<String, dynamic> parsed = json.decode(cleanJson);
      final List<dynamic> recommendations = parsed['recommendations'] ?? [];

      return recommendations
          .map((json) => RecipeModel.fromAI(json))
          .where((recipe) => recipe.name.isNotEmpty)
          .toList();
    } catch (e) {
      print('‚ùå Parse Error: $e');
      print('Response: $response');
      return [];
    }
  }

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç JSON issues
  String _fixJsonIssues(String jsonString) {
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ amount ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô range
    // ‡πÄ‡∏ä‡πà‡∏ô "amount": 5-10 ‚Üí "amount": "5-10"
    jsonString = jsonString.replaceAllMapped(
      RegExp(r'"amount":\s*(\d+\.?\d*)-(\d+\.?\d*)'),
      (match) => '"amount": "${match.group(1)}-${match.group(2)}"',
    );

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ amount ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô number ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    jsonString = jsonString.replaceAllMapped(
      RegExp(r'"amount":\s*"?(\d+\.?\d*)"?(?!["\d-])'),
      (match) => '"amount": ${match.group(1)}',
    );

    // ‡∏•‡∏ö trailing commas ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    jsonString = jsonString.replaceAll(RegExp(r',(\s*[}\]])'), r'$1');

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç missing commas ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á objects
    jsonString = jsonString.replaceAll(RegExp(r'}(\s*{)'), r'},$1');

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç missing commas ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á arrays
    jsonString = jsonString.replaceAll(RegExp(r'](\s*\[)'), r'],$1');

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ quotes ‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    jsonString = jsonString.replaceAll(RegExp(r'([{,]\s*)(\w+):'), r'$1"$2":');

    return jsonString;
  }

  List<RecipeModel> _getFallbackRecommendations(
    List<IngredientModel> ingredients,
  ) {
    final nearExpiry = ingredients.where((i) => i.isNearExpiry).toList();

    if (nearExpiry.isEmpty) {
      return [
        RecipeModel(
          id: 'fallback_1',
          name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà',
          description: '‡πÄ‡∏°‡∏ô‡∏π‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß',
          matchScore: 70,
          reason: '‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ',
          ingredients: [
            RecipeIngredient(name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢', amount: 2, unit: '‡∏à‡∏≤‡∏ô'),
            RecipeIngredient(name: '‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà', amount: 2, unit: '‡∏ü‡∏≠‡∏á'),
          ],
          missingIngredients: [],
          steps: [
            CookingStep(
              stepNumber: 1,
              instruction: '‡∏ï‡∏µ‡πÑ‡∏Ç‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô',
              timeMinutes: 2,
            ),
            CookingStep(
              stepNumber: 2,
              instruction: '‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≤‡∏ß',
              timeMinutes: 5,
            ),
          ],
          cookingTime: 10,
          prepTime: 5,
          difficulty: '‡∏á‡πà‡∏≤‡∏¢',
          servings: 2,
          category: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å',
          nutrition: NutritionInfo(
            calories: 350,
            protein: 12,
            carbs: 45,
            fat: 8,
            fiber: 1,
            sodium: 400,
          ),
          source: '‡∏™‡∏π‡∏ï‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
        ),
      ];
    }

    return nearExpiry.map((ingredient) {
      return RecipeModel(
        id: 'fallback_${ingredient.name}',
        name: '‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å${ingredient.name}',
        description: '‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ${ingredient.name}‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å',
        matchScore: 60,
        reason:
            '‡πÉ‡∏ä‡πâ${ingredient.name}‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${ingredient.daysToExpiry} ‡∏ß‡∏±‡∏ô',
        ingredients: [
          RecipeIngredient(
            name: ingredient.name,
            amount: ingredient.quantity.toDouble(),
            unit: ingredient.unit,
          ),
        ],
        missingIngredients: ['‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á'],
        steps: [
          CookingStep(
            stepNumber: 1,
            instruction: '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°${ingredient.name}‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
            timeMinutes: 5,
          ),
          CookingStep(
            stepNumber: 2,
            instruction: '‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏±‡∏î',
            timeMinutes: 15,
          ),
        ],
        cookingTime: 20,
        prepTime: 5,
        difficulty: '‡∏á‡πà‡∏≤‡∏¢',
        servings: 2,
        category: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å',
        nutrition: NutritionInfo(
          calories: 300,
          protein: 15,
          carbs: 30,
          fat: 10,
          fiber: 3,
          sodium: 500,
        ),
        source: '‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
      );
    }).toList();
  }

  // Cache functions
  Future<void> _cacheRecommendations(
    List<IngredientModel> ingredients,
    List<RecipeModel> recipes,
  ) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cacheData = {
        'ingredients_hash': _getIngredientsHash(ingredients),
        'recipes': recipes
            .map(
              (r) => {
                'menu_name': r.name,
                'description': r.description,
                'match_score': r.matchScore,
                'reason': r.reason,
                'ingredients': r.ingredients.map((i) => i.toJson()).toList(),
                'missing_ingredients': r.missingIngredients,
                'cooking_time': r.cookingTime,
                'prep_time': r.prepTime,
                'difficulty': r.difficulty,
                'servings': r.servings,
                'category': r.category,
                'nutrition': r.nutrition.toJson(),
                'tags': r.tags,
                'source': r.source,
                'source_url': r.sourceUrl,
              },
            )
            .toList(),
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      };

      await prefs.setString(_cacheKey, json.encode(cacheData));
    } catch (e) {
      print('Cache save error: $e');
    }
  }

  Future<List<RecipeModel>?> _getCachedRecommendations(
    List<IngredientModel> ingredients,
  ) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cached = prefs.getString(_cacheKey);

      if (cached == null) return null;

      final cacheData = json.decode(cached);
      final timestamp = cacheData['timestamp'] as int;

      // ‡πÉ‡∏ä‡πâ cache ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      if (DateTime.now().millisecondsSinceEpoch - timestamp > 7200000) {
        return null;
      }

      final cachedHash = cacheData['ingredients_hash'] as String;
      final currentHash = _getIngredientsHash(ingredients);

      if (cachedHash != currentHash) return null;

      final recipesData = cacheData['recipes'] as List;
      return recipesData.map((data) => RecipeModel.fromAI(data)).toList();
    } catch (e) {
      print('Cache load error: $e');
      return null;
    }
  }

  String _getIngredientsHash(List<IngredientModel> ingredients) {
    final sorted =
        ingredients
            .map((i) => '${i.name}-${i.quantity}-${i.daysToExpiry}')
            .toList()
          ..sort();
    return sorted.join('|');
  }
}
