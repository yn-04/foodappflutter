// lib/foodreccom/services/hybrid_recipe_service.dart
import 'dart:convert';
import '../models/ingredient_model.dart';
import '../models/recipe/recipe.dart';
import '../models/cooking_history_model.dart';
import '../models/hybrid_models.dart';
import 'enhanced_ai_recommendation_service.dart';
import 'rapidapi_recipe_service.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'api_usage_service.dart';

class HybridRecipeService {
  final EnhancedAIRecommendationService _aiService =
      EnhancedAIRecommendationService();
  final RapidAPIRecipeService _rapidApiService = RapidAPIRecipeService();

  Future<HybridRecommendationResult> getHybridRecommendations(
    List<IngredientModel> ingredients, {
    List<CookingHistory>? cookingHistory,
    int maxExternalRecipes = 5,
    // Optional user overrides/filters
    List<IngredientModel>? manualSelectedIngredients,
    List<String> cuisineFilters = const [], // english lowercase
    Set<String> dietGoals = const {},
    int? minCalories,
    int? maxCalories,
  }) async {
    final result = HybridRecommendationResult();

    try {
      final ingredientPayload =
          ingredients.map((ingredient) => ingredient.toAIFormat()).toList();

      final filterPrompt =
          '''
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 6 ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‚Üí ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ

‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à:
0. ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà `is_expired` = true
1. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö `days_to_expiry` ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô (0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡∏ß‡∏±‡∏ô ‚Üí ‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
2. ‡∏£‡∏≠‡∏á‡∏•‡∏á‡∏°‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà `days_to_expiry` <= 3 (‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)
3. ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 6 ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ `days_to_expiry` ‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞ `priority_score` ‡∏™‡∏π‡∏á
4. ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ `name` ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (JSON):
${jsonEncode(ingredientPayload)}

‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{
  "priority_ingredients": ["‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö1", "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö2", ...]
}

‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ JSON
''';

      List<IngredientModel> selectedIngredients;
      if (manualSelectedIngredients != null && manualSelectedIngredients.isNotEmpty) {
        selectedIngredients = manualSelectedIngredients.take(6).toList();
        print("üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏≠‡∏á: ${selectedIngredients.map((i) => i.name).join(', ')}");
      } else {
        final priorityIngredients = await _getPriorityIngredientNames(
          prompt: filterPrompt,
        );
        print("‚úÖ Gemini ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô: $priorityIngredients");

        selectedIngredients = _selectTopPriorityIngredients(
          allIngredients: ingredients,
          priorityNames: priorityIngredients,
          limit: 6,
        );
      }
      print(
        "üì¶ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ${selectedIngredients.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RapidAPI: ${selectedIngredients.map((i) => i.name).join(', ')}",
      );

      // ‚úÖ 2) ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å RapidAPI (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡πÄ‡∏°‡∏ô‡∏π) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
      if (selectedIngredients.isEmpty) {
        print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RapidAPI');
        result.externalRecipes = [];
      } else {
        result.externalRecipes = await _rapidApiService.searchRecipesByIngredients(
          selectedIngredients,
          maxResults: maxExternalRecipes,
          ranking: 1, // prioritize using as many selected ingredients as possible
          cuisineFilters: cuisineFilters,
          dietGoals: dietGoals,
          minCalories: minCalories,
          maxCalories: maxCalories,
        );
      }
      result.externalFetchTime = DateTime.now();

      // ‚úÖ 3) ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ RapidAPI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏ú‡πà‡∏≤‡∏ô AI filter)
      result.combinedRecommendations = [...result.externalRecipes];

      // Log current API usage summary to help monitor quotas
      final usage = await ApiUsageService.summary();
      print('üìä $usage');

      // ‚úÖ 4) ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      result.hybridAnalysis = HybridAnalysis.analyze(
        aiRecipes: [], // ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ AI ‡πÅ‡∏Ñ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á ‡πÑ‡∏°‡πà generate ‡πÄ‡∏°‡∏ô‡∏π
        externalRecipes: result.externalRecipes,
        urgentIngredientsCount: ingredients
            .where((i) => i.isUrgentExpiry)
            .length,
      );

      result.isSuccess = true;
    } catch (e) {
      result.error = e.toString();
      result.isSuccess = false;
      print("‚ùå HybridRecommendation Error: $e");
    }

    return result;
  }

  /// Helper: parse priority_ingredients JSON
  List<String> _parsePriorityIngredients(String? responseText) {
    if (responseText == null || responseText.isEmpty) return [];
    try {
      final clean = responseText
          .replaceAll("```json", "")
          .replaceAll("```", "")
          .trim();
      final Map<String, dynamic> parsed = jsonDecode(clean);
      final list = parsed['priority_ingredients'] as List?;
      return list?.map((e) => e.toString()).toList() ?? [];
    } catch (e) {
      print("‚ö†Ô∏è Parse priority ingredients error: $e");
      return [];
    }
  }

  Future<List<String>> _getPriorityIngredientNames({
    required String prompt,
  }) async {
    Future<List<String>> runModel(GenerativeModel model, String label) async {
      try {
        final response = await model.generateContent([
          Content.text(prompt),
        ]);
        final parsed = _parsePriorityIngredients(response.text);
        if (parsed.isNotEmpty) {
          return parsed;
        }
        print('‚ö†Ô∏è $label model returned empty list, will fallback');
      } on GenerativeAIException catch (e) {
        final message = e.message;
        print('‚ö†Ô∏è $label model error: $message');
        final isOverloaded = message.contains('503') ||
            message.toLowerCase().contains('unavailable') ||
            message.toLowerCase().contains('overloaded');
        if (isOverloaded) {
          print('‚ÑπÔ∏è Model overloaded, attempting fallback model');
        }
      } catch (e) {
        print('‚ö†Ô∏è $label model unexpected error: $e');
      }
      return [];
    }

    final primary = await runModel(_aiService.primaryModel, 'Primary');
    if (primary.isNotEmpty) {
      return primary;
    }

    final fallback = await runModel(_aiService.fallbackModel, 'Fallback');
    if (fallback.isNotEmpty) {
      return fallback;
    }

    print('‚ÑπÔ∏è ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏ó‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Gemini ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ');
    return [];
  }

  List<IngredientModel> _selectTopPriorityIngredients({
    required List<IngredientModel> allIngredients,
    required List<String> priorityNames,
    int limit = 6,
  }) {
    if (allIngredients.isEmpty) return [];

    final usableIngredients =
        allIngredients.where((ingredient) => !ingredient.isExpired).toList();

    if (usableIngredients.isEmpty) {
      print('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å');
      return [];
    }

    final normalizedLookup = <String, IngredientModel>{};
    for (final ingredient in usableIngredients) {
      normalizedLookup[_normalizeName(ingredient.name)] = ingredient;
    }

    final selected = <IngredientModel>[];
    final seen = <String>{};

    void addIngredient(IngredientModel ingredient) {
      final key = _normalizeName(ingredient.name);
      if (seen.add(key) && selected.length < limit) {
        selected.add(ingredient);
      }
    }

    for (final name in priorityNames) {
      final normalized = _normalizeName(name);
      if (normalized.isEmpty) continue;
      final ingredient = _findIngredientByName(
        normalizedLookup: normalizedLookup,
        searchPool: usableIngredients,
        normalizedName: normalized,
      );
      if (ingredient != null) {
        addIngredient(ingredient);
      }
      if (selected.length >= limit) {
        return selected;
      }
    }

    final fallbackSorted = List<IngredientModel>.from(usableIngredients)
      ..sort((a, b) {
        final expiryCompare = a.daysToExpiry.compareTo(b.daysToExpiry);
        if (expiryCompare != 0) return expiryCompare;
        return b.priorityScore.compareTo(a.priorityScore);
      });

    for (final ingredient in fallbackSorted) {
      addIngredient(ingredient);
      if (selected.length >= limit) {
        break;
      }
    }

    return selected;
  }

  IngredientModel? _findIngredientByName({
    required Map<String, IngredientModel> normalizedLookup,
    required List<IngredientModel> searchPool,
    required String normalizedName,
  }) {
    if (normalizedLookup.containsKey(normalizedName)) {
      return normalizedLookup[normalizedName];
    }

    for (final entry in normalizedLookup.entries) {
      if (entry.key.contains(normalizedName) ||
          normalizedName.contains(entry.key)) {
        return entry.value;
      }
    }

    for (final ingredient in searchPool) {
      final ingredientName = _normalizeName(ingredient.name);
      if (ingredientName == normalizedName) {
        return ingredient;
      }
    }

    return null;
  }

  String _normalizeName(String name) => name.trim().toLowerCase();
}
