// lib/foodreccom/services/enhanced_ai_recommendation_service.dart
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

import 'api_key_checker.dart';

class EnhancedAIRecommendationService {
  late List<String> _apiKeys;
  int _currentKeyIndex = 0;

  late GenerativeModel _primaryModel;
  late GenerativeModel _fallbackModel;

  /// ‚úÖ expose ‡πÉ‡∏´‡πâ HybridRecipeService ‡πÉ‡∏ä‡πâ
  GenerativeModel get primaryModel => _primaryModel;
  GenerativeModel get fallbackModel => _fallbackModel;

  EnhancedAIRecommendationService() {
    final apiKeysStr = dotenv.env['GEMINI_API_KEYS'];
    if (apiKeysStr == null || apiKeysStr.isEmpty) {
      throw Exception('‚ùå GEMINI_API_KEYS is missing in .env');
    }

    _apiKeys = apiKeysStr.split(',').map((k) => k.trim()).toList();

    // ‚úÖ init model ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    _initModels();

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ key ‡πÑ‡∏´‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    final checker = ApiKeyChecker(_apiKeys);
    checker.checkKeys().then((validKeys) {
      if (validKeys.isEmpty) {
        throw Exception("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key ‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢");
      }
      _apiKeys = validKeys;
      print("üîë ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ${_apiKeys.length} keys");
      _initModels(); // refresh ‡∏î‡πâ‡∏ß‡∏¢ key ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß
    });
  }

  void _initModels() {
    final apiKey = _apiKeys[_currentKeyIndex];
    print(
      "üëâ Using API Key[${_currentKeyIndex + 1}/${_apiKeys.length}]: ${apiKey.substring(0, 6)}...",
    );

    _primaryModel = GenerativeModel(
      model: 'gemini-1.5-flash',
      apiKey: apiKey,
      generationConfig: GenerationConfig(
        temperature: 0.2, // ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 1024,
        responseMimeType: "application/json",
      ),
    );

    _fallbackModel = GenerativeModel(
      model: 'gemini-2.5-pro',
      apiKey: apiKey,
      generationConfig: GenerationConfig(
        temperature: 0.2,
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 2048,
        responseMimeType: "application/json",
      ),
    );
  }

  /// ‚úÖ ‡∏´‡∏°‡∏∏‡∏ô API key ‡∏ñ‡πâ‡∏≤ quota ‡πÄ‡∏ï‡πá‡∏°
  void rotateApiKey() {
    _currentKeyIndex = (_currentKeyIndex + 1) % _apiKeys.length;
    _initModels();
  }
}
