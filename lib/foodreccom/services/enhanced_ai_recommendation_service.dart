// lib/foodreccom/services/enhanced_ai_recommendation_service.dart
import 'dart:convert';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

import '../models/ingredient_model.dart';
import '../models/recipe/recipe.dart';
import '../models/cooking_history_model.dart';
import 'cooking_service.dart';
import 'api_key_checker.dart';

class EnhancedAIRecommendationService {
  static const String _cacheKey = 'enhanced_cached_recommendations';

  late List<String> _apiKeys;
  int _currentKeyIndex = 0;

  late GenerativeModel _primaryModel;
  late GenerativeModel _fallbackModel;

  final CookingService _cookingService = CookingService();

  EnhancedAIRecommendationService() {
    final apiKeysStr = dotenv.env['GEMINI_API_KEYS'];
    if (apiKeysStr == null || apiKeysStr.isEmpty) {
      throw Exception('‚ùå GEMINI_API_KEYS is missing in .env');
    }

    _apiKeys = apiKeysStr.split(',').map((k) => k.trim()).toList();

    // ‚úÖ init model ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢ key ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô LateInitializationError
    _initModels();

    // ‚úÖ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ key ‡πÑ‡∏´‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    final checker = ApiKeyChecker(_apiKeys);
    checker.checkKeys().then((validKeys) {
      if (validKeys.isEmpty) {
        throw Exception("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key ‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢");
      }
      _apiKeys = validKeys;
      print("üîë ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ${_apiKeys.length} keys");
      _initModels(); // refresh ‡∏î‡πâ‡∏ß‡∏¢ key ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß
    });
  }

  void _initModels() {
    final apiKey = _apiKeys[_currentKeyIndex];
    print(
      "üëâ Using API Key[${_currentKeyIndex + 1}/${_apiKeys.length}]: ${apiKey.substring(0, 6)}...",
    );

    _primaryModel = GenerativeModel(
      model: 'gemini-1.5-flash',
      apiKey: apiKey,
      generationConfig: GenerationConfig(
        temperature: 0.8,
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 4096,
        responseMimeType: "application/json",
      ),
    );

    _fallbackModel = GenerativeModel(
      model: 'gemini-2.5-pro',
      apiKey: apiKey,
      generationConfig: GenerationConfig(
        temperature: 0.8,
        topK: 50,
        topP: 0.95,
        maxOutputTokens: 6144,
        responseMimeType: "application/json",
      ),
    );
  }

  void _rotateApiKey() {
    _currentKeyIndex = (_currentKeyIndex + 1) % _apiKeys.length;
    _initModels();
  }

  Future<List<RecipeModel>> getEnhancedRecommendations(
    List<IngredientModel> ingredients, {
    List<CookingHistory>? cookingHistory,
  }) async {
    try {
      cookingHistory ??= await _cookingService.getCookingHistory(limitDays: 30);

      print("‚ö° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini-1.5-Flash (forced refresh)...");
      final prompt = _buildEnhancedPrompt(ingredients, cookingHistory);

      String? responseText;
      try {
        final response = await _primaryModel
            .generateContent([Content.text(prompt)])
            .timeout(const Duration(seconds: 60));
        responseText = response.text;
      } catch (e) {
        final errorStr = e.toString();
        if (errorStr.contains("Quota") || errorStr.contains("429")) {
          print("‚ö†Ô∏è Quota ‡∏´‡∏°‡∏î ‚Üí ‡πÉ‡∏ä‡πâ pro");
          final response = await _fallbackModel
              .generateContent([Content.text(prompt)])
              .timeout(const Duration(seconds: 60));
          responseText = response.text;
        } else {
          rethrow;
        }
      }

      if (responseText == null) throw Exception('AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ');

      final recipes = _parseDetailedResponse(responseText);

      // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö cache backup ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      await _cacheRecommendations(ingredients, recipes, cookingHistory);

      return recipes;
    } catch (e) {
      print("‚ùå Enhanced AI Error: $e");
      _rotateApiKey();
      return _getSmartFallbackRecommendations(ingredients, cookingHistory);
    }
  }

  String _buildEnhancedPrompt(
    List<IngredientModel> ingredients,
    List<CookingHistory> history,
  ) {
    return '''
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏ü AI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: ${ingredients.map((i) => "${i.name} (${i.quantity}${i.unit})").join(", ")}
- ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${history.map((h) => h.recipeName).join(", ")}
‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 5 ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•, ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°, ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥, ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON:
{
  "recommendations": [...]
}
''';
  }

  List<RecipeModel> _parseDetailedResponse(String response) {
    try {
      final cleanJson = _sanitizeJson(response);
      final parsed = json.decode(cleanJson) as Map<String, dynamic>;
      final recs = parsed['recommendations'] as List? ?? [];
      return recs.map((json) => RecipeModel.fromAI(json)).toList();
    } catch (e) {
      print("‚ùå Enhanced Parse Error: $e");
      return [];
    }
  }

  String _sanitizeJson(String response) {
    String clean = response
        .replaceAll("```json", "")
        .replaceAll("```", "")
        .trim();

    final start = clean.indexOf("{");
    final end = clean.lastIndexOf("}") + 1;
    if (start != -1 && end > start) clean = clean.substring(start, end);

    // ‚úÖ case: amount: 1-2 ‚Üí ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    clean = clean.replaceAllMapped(
      RegExp(r'"amount":\s*(\d+\.?\d*)-(\d+\.?\d*)'),
      (m) {
        final avg = (double.parse(m.group(1)!) + double.parse(m.group(2)!)) / 2;
        return '"amount": $avg';
      },
    );

    // ‚úÖ case: nutrition field ‡πÄ‡∏õ‡πá‡∏ô string ‚Üí ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    clean = clean.replaceAllMapped(
      RegExp(r'"(calories|protein|carbs|fat|fiber|sodium)"\s*:\s*"([^"]+)"'),
      (m) {
        final field = m.group(1)!;
        final valueStr = m.group(2)!;

        // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô string
        final matches = RegExp(
          r'(\d+\.?\d*)',
        ).allMatches(valueStr).map((e) => e.group(1)!).toList();

        if (matches.isEmpty) return '"$field": 0';
        if (matches.length == 1) return '"$field": ${matches.first}';

        // ‡∏°‡∏µ range ‡πÄ‡∏ä‡πà‡∏ô "250-300"
        final avg =
            (double.parse(matches.first) + double.parse(matches.last)) / 2;
        return '"$field": $avg';
      },
    );

    // ‚úÖ ‡∏•‡∏ö comma ‡πÄ‡∏Å‡∏¥‡∏ô
    clean = clean.replaceAll(RegExp(r',(\s*[}\]])'), r'$1');

    return clean;
  }

  List<RecipeModel> _getSmartFallbackRecommendations(
    List<IngredientModel> ingredients,
    List<CookingHistory>? history,
  ) {
    if (ingredients.isEmpty) {
      return [
        RecipeModel(
          id: 'fallback_basic',
          name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà',
          description: '‡πÄ‡∏°‡∏ô‡∏π‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
          matchScore: 60,
          reason: '‡πÄ‡∏°‡∏ô‡∏π fallback ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
          ingredients: [
            RecipeIngredient(name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢', amount: 1, unit: '‡∏à‡∏≤‡∏ô'),
            RecipeIngredient(name: '‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà', amount: 1, unit: '‡∏ü‡∏≠‡∏á'),
          ],
          missingIngredients: [],
          steps: [],
          cookingTime: 10,
          prepTime: 5,
          difficulty: '‡∏á‡πà‡∏≤‡∏¢',
          servings: 1,
          category: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å',
          nutrition: NutritionInfo(
            calories: 350,
            protein: 12,
            carbs: 45,
            fat: 8,
            fiber: 1,
            sodium: 400,
          ),
          source: 'Fallback',
        ),
      ];
    }

    return ingredients.take(3).map((i) {
      return RecipeModel(
        id: 'fallback_${i.name}',
        name: '‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å${i.name}',
        description: '‡πÉ‡∏ä‡πâ ${i.name} ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å',
        matchScore: i.priorityScore,
        reason: '‡πÄ‡∏°‡∏ô‡∏π fallback ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ',
        ingredients: [
          RecipeIngredient(name: i.name, amount: i.quantity, unit: i.unit),
        ],
        missingIngredients: ['‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á'],
        steps: [],
        cookingTime: 20,
        prepTime: 5,
        difficulty: '‡∏á‡πà‡∏≤‡∏¢',
        servings: 2,
        category: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å',
        nutrition: NutritionInfo(
          calories: 300,
          protein: 15,
          carbs: 30,
          fat: 10,
          fiber: 3,
          sodium: 500,
        ),
        source: 'Fallback',
      );
    }).toList();
  }

  Future<void> _cacheRecommendations(
    List<IngredientModel> ingredients,
    List<RecipeModel> recipes,
    List<CookingHistory> history,
  ) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userId = FirebaseAuth.instance.currentUser?.uid ?? 'guest';
      final cacheKey = '${_cacheKey}_$userId';

      final cacheData = {
        'ingredients_hash': _getIngredientsHash(ingredients),
        'history_hash': _getHistoryHash(history),
        'recipes': recipes.map((r) => r.toJson()).toList(),
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      };

      await prefs.setString(cacheKey, json.encode(cacheData));
      print("‚úÖ Enhanced cache saved (backup only) for $userId");
    } catch (e) {
      print('‚ö†Ô∏è Enhanced cache save error: $e');
    }
  }

  String _getIngredientsHash(List<IngredientModel> ingredients) {
    final sorted =
        ingredients
            .map((i) => '${i.name}-${i.quantity}-${i.daysToExpiry}')
            .toList()
          ..sort();
    return sorted.join('|');
  }

  String _getHistoryHash(List<CookingHistory> history) {
    final recent = history
        .take(5)
        .map((h) => '${h.recipeName}-${h.cookedAt.day}')
        .join('|');
    return recent;
  }
}
