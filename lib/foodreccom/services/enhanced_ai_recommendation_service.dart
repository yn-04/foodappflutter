// lib/foodreccom/services/enhanced_ai_recommendation_service.dart
import 'dart:convert';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:http/http.dart' as http;
import 'package:my_app/foodreccom/constants/nutrition_thresholds.dart';
import 'package:my_app/foodreccom/utils/allergy_utils.dart';
import 'package:my_app/foodreccom/utils/shopping_item_extensions.dart';
import 'package:my_app/rawmaterial/models/shopping_item.dart';

import 'api_key_checker.dart';

class EnhancedAIRecommendationService {
  late List<String> _apiKeys;
  int _currentKeyIndex = 0;

  late GenerativeModel _primaryModel;
  late GenerativeModel _fallbackModel;
  // Defaults tuned for google_generative_ai ^0.4.x (v1beta): use gemini-pro
  String _primaryModelName = 'gemini-pro';
  String _fallbackModelName = 'gemini-pro';
  bool _useSdk = false;

  /// ‚úÖ expose ‡πÉ‡∏´‡πâ HybridRecipeService ‡πÉ‡∏ä‡πâ
  GenerativeModel get primaryModel => _primaryModel;
  GenerativeModel get fallbackModel => _fallbackModel;
  bool get canUseSdk => _useSdk;

  EnhancedAIRecommendationService() {
    final apiKeysStr = dotenv.env['GEMINI_API_KEYS'];
    if (apiKeysStr == null || apiKeysStr.isEmpty) {
      _apiKeys = [];
      print('‚ö†Ô∏è GEMINI_API_KEYS missing ‚Äî AI insight will use fallback.');
    } else {
      _apiKeys = apiKeysStr
          .split(',')
          .map((k) => k.trim())
          .where((s) => s.isNotEmpty)
          .toList();
    }

    // allow env override of model names
    final envPrimary = (dotenv.env['GEMINI_PRIMARY_MODEL'] ?? '').trim();
    final envFallback = (dotenv.env['GEMINI_FALLBACK_MODEL'] ?? '').trim();
    if (envPrimary.isNotEmpty) _primaryModelName = envPrimary;
    if (envFallback.isNotEmpty) _fallbackModelName = envFallback;

    final sdkPref = (dotenv.env['GEMINI_USE_SDK'] ?? 'false')
        .trim()
        .toLowerCase();
    _useSdk = sdkPref == 'true' || sdkPref == '1' || sdkPref == 'on';

    // init with first key if any to avoid nulls
    _initModels();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ key ‡πÑ‡∏´‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á (non-fatal)
    if (_apiKeys.isNotEmpty) {
      final checker = ApiKeyChecker(_apiKeys);
      checker.checkKeys().then((validKeys) {
        if (validKeys.isEmpty) {
          print('‚ö†Ô∏è No valid Gemini keys ‚Äî will rely on local fallback.');
          return;
        }
        _apiKeys = validKeys;
        print("üîë ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ${_apiKeys.length} keys");
        _initModels(); // refresh ‡∏î‡πâ‡∏ß‡∏¢ key ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß
      });
    }

    // Optional: probe available models via ListModels if enabled
    final debugList = (dotenv.env['GEMINI_DEBUG_LIST_MODELS'] ?? 'false')
        .trim()
        .toLowerCase();
    if (debugList == 'true' || debugList == '1' || debugList == 'on') {
      _probeAndAdjustModels();
    }
  }

  void _initModels() {
    final apiKey = _apiKeys.isEmpty ? '' : _apiKeys[_currentKeyIndex];
    if (_apiKeys.isEmpty) {
      print("üëâ No Gemini API key ‚Äî using fallback");
    } else {
      final previewLength = apiKey.length >= 6 ? 6 : apiKey.length;
      final preview = previewLength > 0
          ? apiKey.substring(0, previewLength)
          : '';
      final suffix = apiKey.length > previewLength ? '...' : '';
      print(
        "üëâ Using API Key[${_currentKeyIndex + 1}/${_apiKeys.length}]: $preview$suffix",
      );
    }

    _primaryModel = GenerativeModel(
      model: _primaryModelName,
      apiKey: apiKey,
      generationConfig: GenerationConfig(
        temperature: 0.2, // ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 1024,
        responseMimeType: "application/json",
      ),
    );

    _fallbackModel = GenerativeModel(
      model: _fallbackModelName,
      apiKey: apiKey,
      generationConfig: GenerationConfig(
        temperature: 0.2,
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 2048,
        responseMimeType: "application/json",
      ),
    );
  }

  /// ‚úÖ ‡∏´‡∏°‡∏∏‡∏ô API key ‡∏ñ‡πâ‡∏≤ quota ‡πÄ‡∏ï‡πá‡∏°
  void rotateApiKey() {
    _currentKeyIndex = (_currentKeyIndex + 1) % _apiKeys.length;
    _initModels();
  }

  // Smart generator: try SDK primary/fallback, then REST v1/v1beta fallbacks with multiple models
  Future<String?> generateTextSmart(String prompt) async {
    // 1) Try SDK primary
    if (_useSdk) {
      try {
        final res = await _primaryModel.generateContent([Content.text(prompt)]);
        final t = res.text?.trim();
        if (t != null && t.isNotEmpty) return t;
      } catch (_) {}
    }

    // 2) Try SDK fallback
    try {
      final res = await _fallbackModel.generateContent([Content.text(prompt)]);
      final t = res.text?.trim();
      if (t != null && t.isNotEmpty) return t;
    } catch (_) {}

    // 3) Try REST on v1 and v1beta with best-effort model list
    if (_apiKeys.isEmpty) return null;
    final models = <String>{
      _primaryModelName,
      _fallbackModelName,
      'gemini-pro',
      'gemini-1.5-flash-8b',
      'gemini-1.5-flash',
      'gemini-1.5-pro',
      'gemini-1.5-pro-002',
    }.where((m) => m.trim().isNotEmpty).toList();

    for (final key in _apiKeys) {
      for (final base in const [
        'https://generativelanguage.googleapis.com/v1',
        'https://generativelanguage.googleapis.com/v1beta',
      ]) {
        for (final m in models) {
          try {
            final txt = await _httpGenerate(base, m, key, prompt);
            if (txt != null && txt.isNotEmpty) return txt;
          } catch (_) {}
        }
      }
    }
    return null;
  }

  Future<String?> _httpGenerate(
    String base,
    String model,
    String apiKey,
    String prompt,
  ) async {
    final uri = Uri.parse('$base/models/$model:generateContent?key=$apiKey');
    final body = jsonEncode({
      'contents': [
        {
          'parts': [
            {'text': prompt},
          ],
        },
      ],
    });
    final res = await http
        .post(uri, headers: {'Content-Type': 'application/json'}, body: body)
        .timeout(const Duration(seconds: 20));
    if (res.statusCode != 200) return null;
    final map = _tryDecode(res.body);
    // v1/v1beta: candidates[0].content.parts[0].text
    final cands = (map['candidates'] as List?)
        ?.whereType<Map<String, dynamic>>()
        .toList();
    if (cands == null || cands.isEmpty) return null;
    final content = cands.first['content'] as Map<String, dynamic>?;
    final parts = (content?['parts'] as List?)
        ?.whereType<Map<String, dynamic>>()
        .toList();
    final text = parts != null && parts.isNotEmpty
        ? parts.first['text']?.toString()
        : null;
    return (text != null && text.isNotEmpty) ? text : null;
  }

  Future<void> _probeAndAdjustModels() async {
    if (_apiKeys.isEmpty) return;
    final key = _apiKeys[_currentKeyIndex];
    try {
      final chosen = await _chooseAvailableModels(key);
      if (chosen != null) {
        _primaryModelName = chosen.$1;
        _fallbackModelName = chosen.$2 ?? _fallbackModelName;
        print(
          'üîé Gemini models selected: primary=$_primaryModelName, fallback=$_fallbackModelName',
        );
        _initModels();
      }
    } catch (e) {
      print('‚ö†Ô∏è Probe models failed: $e');
    }
  }

  Future<(String, String?)?> _chooseAvailableModels(String apiKey) async {
    Future<List<Map<String, dynamic>>?> fetch(String base) async {
      final uri = Uri.parse('$base/models?key=$apiKey');
      final res = await http.get(uri).timeout(const Duration(seconds: 10));
      if (res.statusCode != 200) return null;
      final body = res.body;
      final data = body.isNotEmpty ? body : '{}';
      final jsonMap = _tryDecode(data);
      final models = (jsonMap['models'] as List?)
          ?.whereType<Map<String, dynamic>>()
          .toList();
      return models;
    }

    final v1 = await fetch('https://generativelanguage.googleapis.com/v1');
    final v1b =
        v1 ?? await fetch('https://generativelanguage.googleapis.com/v1beta');
    final models = v1 ?? v1b;
    if (models == null || models.isEmpty) return null;

    String strip(String name) =>
        name.startsWith('models/') ? name.substring(7) : name;
    bool supportsGen(Map m) {
      final methods =
          (m['supportedGenerationMethods'] as List?)
              ?.map((e) => e.toString())
              .toSet() ??
          {};
      return methods.contains('generateContent') || methods.contains('create');
    }

    final names = models
        .where(supportsGen)
        .map((m) => strip((m['name'] ?? '').toString()))
        .toSet();

    String? pick(List<String> prefs) =>
        prefs.firstWhere((p) => names.contains(p), orElse: () => '');

    final primaryPrefs = <String>[
      _primaryModelName,
      'gemini-pro',
      'gemini-1.5-flash',
      'gemini-1.5-flash-8b',
      'gemini-1.5-pro',
      'gemini-1.5-pro-002',
    ];
    final fallbackPrefs = <String>[
      _fallbackModelName,
      'gemini-pro',
      'gemini-1.5-pro',
      'gemini-1.5-pro-002',
      'gemini-1.5-flash',
      'gemini-1.5-flash-8b',
    ];

    final p = pick(primaryPrefs);
    final f = pick(fallbackPrefs);
    final primary = (p != null && p.isNotEmpty) ? p : null;
    final fallback = (f != null && f.isNotEmpty) ? f : null;
    if (primary == null) return null;
    return (primary, fallback);
  }

  Map<String, dynamic> _tryDecode(String s) {
    try {
      final v = jsonDecode(s);
      return v is Map<String, dynamic> ? v : {};
    } catch (_) {
      return {};
    }
  }

  Future<Map<String, dynamic>?> generateWeeklyMealPlan({
    required List<ShoppingItem> pantryItems,
    Map<String, dynamic>? userProfile,
    String? dietaryNotes,
  }) async {
    final prompt = _buildWeeklyMealPlanPrompt(
      pantryItems: pantryItems,
      userProfile: userProfile,
      dietaryNotes: dietaryNotes,
    );
    final raw = await generateTextSmart(prompt);
    if (raw == null || raw.trim().isEmpty) return null;
    final normalized = _stripJsonFence(raw);
    final decoded = _tryDecode(normalized);
    if (decoded.isEmpty) return null;
    _enforceFuzzyFrequencies(decoded);
    return decoded;
  }

  String _buildWeeklyMealPlanPrompt({
    required List<ShoppingItem> pantryItems,
    Map<String, dynamic>? userProfile,
    String? dietaryNotes,
  }) {
    final pantryPayload = pantryItems.map((item) {
      final frequency = item.consumptionFrequency;
      return {
        'name': item.name,
        'category': item.category,
        'quantity': item.quantity,
        'unit': item.unit,
        'frequency': frequency == null ? 'unknown' : _frequencyToken(frequency),
        if (item.consumptionReason != null)
          'frequency_reason': item.consumptionReason,
      };
    }).toList();

    final baseProfile = userProfile ?? {};
    final profile = Map<String, dynamic>.from(baseProfile);
    final dietary = (dietaryNotes ?? '').trim();
    final guidelines = dietary.isEmpty
        ? 'No additional dietary restrictions provided.'
        : dietary;

    final allergyInputs = <String>[];
    final allergiesField = baseProfile['allergies'];
    if (allergiesField is String && allergiesField.trim().isNotEmpty) {
      allergyInputs.add(allergiesField);
    } else if (allergiesField is Iterable) {
      for (final entry in allergiesField) {
        if (entry is String && entry.trim().isNotEmpty) {
          allergyInputs.add(entry);
        }
      }
    }

    final allergyExpansion = AllergyUtils.expandAllergens(allergyInputs);
    final allergyCoverage = describeAllergyCoverage(allergyInputs);
    final allergyKeywords = allergyExpansion.all.toList()..sort();
    final allergyKeywordsJson = jsonEncode(allergyKeywords);
    final allergyKeywordsEn = allergyExpansion.englishOnly.toList()..sort();
    final allergyKeywordsEnJson = allergyKeywordsEn.isEmpty
        ? null
        : jsonEncode(allergyKeywordsEn);

    if (allergyKeywords.isNotEmpty) {
      profile['allergy_keywords'] = allergyKeywords;
    }
    if (allergyKeywordsEn.isNotEmpty) {
      profile['allergy_keywords_en'] = allergyKeywordsEn;
    }

    final allergenKeywordBlock = [
      'Allergen keywords (JSON, ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î): $allergyKeywordsJson',
      if (allergyKeywordsEnJson != null)
        'English-only allergen keywords (JSON): $allergyKeywordsEnJson',
    ].join('\n');

    return '''
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∂‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á DRI (‡πÑ‡∏Ç‡∏°‡∏±‡∏ô, ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß, ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•, ‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏° ‡∏ï‡πà‡∏≠ 100 ‡∏Å‡∏£‡∏±‡∏°) ‡πÅ‡∏•‡∏∞‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤ fuzzy frequency ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô occasional
- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‚Üí ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô weekly
- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á 2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô once_per_day
- ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‚Üí ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô daily

‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 7 ‡∏ß‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏°‡∏µ 3 ‡∏°‡∏∑‡πâ‡∏≠ (‡πÄ‡∏ä‡πâ‡∏≤ ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô ‡πÄ‡∏¢‡πá‡∏ô) ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:
- ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å pantry snapshot ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
- ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ‡πÉ‡∏ô user profile ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î: ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå/‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏û‡πâ‡∏ô‡∏°‡∏ß‡∏±‡∏ß ‚Üí ‡∏á‡∏î‡∏ô‡∏° ‡πÄ‡∏ô‡∏¢ ‡∏ä‡∏µ‡∏™ ‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï ‡πÄ‡∏ß‡∏¢‡πå ‡πÄ‡∏Ñ‡∏ã‡∏µ‡∏ô; ‡πÅ‡∏û‡πâ‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á ‚Üí ‡∏á‡∏î‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á ‡πÄ‡∏ô‡∏¢‡∏ñ‡∏±‡πà‡∏ß ‡∏ô‡πâ‡∏≥‡∏à‡∏¥‡πâ‡∏°/‡∏ã‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á) ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î
 - ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡∏≠‡∏™ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏°‡∏±‡∏Å/‡∏ö‡πà‡∏° ‡πÄ‡∏™‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß/‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß‡∏î‡∏≥/‡∏ã‡∏≠‡∏™‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (soy sauce, shoyu, ponzu), ‡∏ã‡∏≠‡∏™‡πÄ‡∏ó‡∏≠‡∏£‡∏¥‡∏¢‡∏≤‡∏Å‡∏¥, ‡∏ã‡∏≠‡∏™‡∏Æ‡∏≠‡∏¢‡∏ã‡∏¥‡∏ô, ‡∏ß‡∏π‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ä‡∏≠‡∏£‡πå, ‡∏ô‡πâ‡∏≥‡∏ã‡∏∏‡∏õ‡∏Å‡πâ‡∏≠‡∏ô, ‡∏ã‡∏≠‡∏™‡∏û‡∏£‡∏¥‡∏Å/‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å/‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏û‡∏£‡∏¥‡∏Å (sriracha, hot sauce, gochujang, sambal), ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏≤‡∏™‡∏ï‡πâ‡∏≤/‡∏£‡∏≤‡πÄ‡∏°‡∏ô/‡∏≠‡∏∏‡∏î‡πâ‡∏á/‡πÇ‡∏ã‡∏ö‡∏∞, ‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡∏Å‡∏∂‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ (‡∏°‡∏≤‡∏°‡πà‡∏≤/‡πÑ‡∏ß‡πÑ‡∏ß/‡∏¢‡∏≥‡∏¢‡∏≥/‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô), ‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á/‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤/‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà‡∏´‡∏°‡∏±‡∏Å, ‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï, ‡∏ä‡∏µ‡∏™, ‡πÑ‡∏ß‡∏ô‡πå, ‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå, ‡∏Ñ‡∏≠‡∏°‡∏ö‡∏π‡∏ä‡∏∞ ‚Äî ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
- ‡πÉ‡∏ä‡πâ `allergy_keywords` ‡πÅ‡∏•‡∏∞ `allergy_keywords_en` ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á ‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏™‡∏•‡∏á ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
- ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô (‡πÄ‡∏ä‡πâ‡∏≤+‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô+‡πÄ‡∏¢‡πá‡∏ô) ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô: ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏£‡∏ß‡∏° < 70 ‡∏Å‡∏£‡∏±‡∏°, ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏£‡∏ß‡∏° < 20 ‡∏Å‡∏£‡∏±‡∏°, ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏£‡∏ß‡∏° < 90 ‡∏Å‡∏£‡∏±‡∏°, ‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°‡∏£‡∏ß‡∏° < 6 ‡∏Å‡∏£‡∏±‡∏° ‡∏´‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå
- ‡∏ß‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô ‡∏ú‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∏‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
- ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå `reason`

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ (‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á/‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á):
$allergyCoverage

$allergenKeywordBlock

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
- `name`
- `description` (‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
- `ingredients` (‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á)
- `nutrition_per_serving` ‡∏ó‡∏µ‡πà‡∏°‡∏µ `kcal`, `fat_g`, `saturated_fat_g`, `sugar_g`, `salt_g`
- `ai_frequency_guess` (‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
- `reason` (‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)

‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì `consumption_frequency` ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤ fuzzy ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏ô `frequency_reason`
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° `summary.notes` ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏à‡∏∂‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô

Pantry snapshot (JSON):
${jsonEncode(pantryPayload)}

User profile (JSON):
${jsonEncode(profile)}

Dietary notes: $guidelines

Use this sample structure as reference (values already validated):
$_seedWeeklyPlanExample

Output JSON only, matching this schema:
{
  "week_plan": [
    {
      "day": 1,
      "meals": {
        "breakfast": {
          "name": "...",
          "description": "...",
          "ingredients": ["...", "..."],
          "nutrition_per_serving": {
            "kcal": 0,
            "fat_g": 0,
            "saturated_fat_g": 0,
            "sugar_g": 0,
            "salt_g": 0
          },
          "ai_frequency_guess": "daily|once_per_day|weekly|occasional",
          "reason": "...",
          "consumption_frequency": "daily|once_per_day|weekly|occasional",
          "frequency_reason": "..."
        },
        "lunch": { ... },
        "dinner": { ... }
      }
    }
  ],
  "summary": {
    "total_kcal_per_day": "...",
    "notes": ["..."]
  }
}

Do not include markdown fences or commentary.
''';
  }

  void _enforceFuzzyFrequencies(Map<String, dynamic> plan) {
    final week = plan['week_plan'];
    if (week is! List) return;
    for (final day in week) {
      if (day is! Map<String, dynamic>) continue;
      final meals = day['meals'];
      if (meals is! Map) continue;
      meals.forEach((key, value) {
        if (value is! Map<String, dynamic>) return;
        final nutrition = value['nutrition_per_serving'];
        if (nutrition is! Map) return;
        final fat = _asDouble(nutrition['fat_g']);
        final saturates = _asDouble(nutrition['saturated_fat_g']);
        final sugar = _asDouble(nutrition['sugar_g']);
        final salt = _asDouble(nutrition['salt_g']);
        final frequency = NutritionThresholds.frequencyFromValues(
          fat: fat,
          saturates: saturates,
          sugar: sugar,
          salt: salt,
        );
        final reason = NutritionThresholds.reasonFromValues(
          fat: fat,
          saturates: saturates,
          sugar: sugar,
          salt: salt,
        );
        if (frequency != null) {
          value['consumption_frequency'] = _frequencyToken(frequency);
        }
        if (reason != null) {
          value['frequency_reason'] = reason;
        }
      });
    }
  }

  String _frequencyToken(ConsumptionFrequency frequency) {
    switch (frequency) {
      case ConsumptionFrequency.daily:
        return 'daily';
      case ConsumptionFrequency.oncePerDay:
        return 'once_per_day';
      case ConsumptionFrequency.weekly:
        return 'weekly';
      case ConsumptionFrequency.occasional:
        return 'occasional';
    }
  }

  String _stripJsonFence(String raw) {
    final trimmed = raw.trim();
    if (trimmed.startsWith('```')) {
      final fenceIndex = trimmed.indexOf('\n');
      if (fenceIndex != -1) {
        final endFence = trimmed.lastIndexOf('```');
        if (endFence > fenceIndex) {
          return trimmed.substring(fenceIndex + 1, endFence).trim();
        }
      }
    }
    return trimmed;
  }

  static double? _asDouble(dynamic value) {
    if (value == null) return null;
    if (value is double) return value;
    if (value is int) return value.toDouble();
    return double.tryParse(value.toString());
  }

  static const String _seedWeeklyPlanExample = '''
{
  "week_plan": [
    {
      "day": 1,
      "meals": {
        "breakfast": {
          "name": "Whole-wheat toast with cottage cheese and berries",
          "ingredients": ["whole-wheat bread", "cottage cheese", "mixed berries"],
          "nutrition_per_serving": {
            "kcal": 360,
            "fat_g": 2.5,
            "saturated_fat_g": 0.9,
            "sugar_g": 3.8,
            "salt_g": 0.2
          },
          "ai_frequency_guess": "daily",
          "reason": "All nutrients low, supports steady morning energy.",
          "consumption_frequency": "daily",
          "frequency_reason": "All tracked nutrients are low - safe for daily consumption."
        },
        "lunch": {
          "name": "Grilled chicken with brown rice and vegetables",
          "ingredients": ["chicken breast", "brown rice", "broccoli", "carrot"],
          "nutrition_per_serving": {
            "kcal": 520,
            "fat_g": 4.5,
            "saturated_fat_g": 1.2,
            "sugar_g": 4.1,
            "salt_g": 0.35
          },
          "ai_frequency_guess": "daily",
          "reason": "Lean protein and whole grains with mostly low nutrients.",
          "consumption_frequency": "daily",
          "frequency_reason": "Slightly elevated saturated fat - suitable for daily use."
        },
        "dinner": {
          "name": "Salmon stir-fry with quinoa and greens",
          "ingredients": ["salmon", "quinoa", "bok choy", "bell pepper"],
          "nutrition_per_serving": {
            "kcal": 590,
            "fat_g": 8.5,
            "saturated_fat_g": 2.6,
            "sugar_g": 5.4,
            "salt_g": 0.45
          },
          "ai_frequency_guess": "once_per_day",
          "reason": "Healthy fats but moderate saturated fat and sugar.",
          "consumption_frequency": "once_per_day",
          "frequency_reason": "Moderate saturated fat and sugar - keep to once per day."
        }
      }
    },
    {
      "day": 2,
      "meals": {
        "breakfast": {
          "name": "Overnight oats with banana and chia",
          "ingredients": ["rolled oats", "banana", "chia seeds", "soy milk"],
          "nutrition_per_serving": {
            "kcal": 380,
            "fat_g": 3.1,
            "saturated_fat_g": 0.8,
            "sugar_g": 7.8,
            "salt_g": 0.28
          },
          "ai_frequency_guess": "daily",
          "reason": "High fiber and mostly low-risk nutrients.",
          "consumption_frequency": "daily",
          "frequency_reason": "All tracked nutrients are low - safe for daily consumption."
        },
        "lunch": {
          "name": "Herb roasted turkey with sweet potato mash",
          "ingredients": ["turkey breast", "sweet potato", "olive oil", "green beans"],
          "nutrition_per_serving": {
            "kcal": 540,
            "fat_g": 5.5,
            "saturated_fat_g": 1.6,
            "sugar_g": 4.5,
            "salt_g": 0.5
          },
          "ai_frequency_guess": "once_per_day",
          "reason": "Moderate fat and salt levels, balance with rest of day.",
          "consumption_frequency": "once_per_day",
          "frequency_reason": "Moderate saturated fat and salt - keep to once per day."
        },
        "dinner": {
          "name": "Creamy coconut curry with brown rice",
          "ingredients": ["coconut milk", "chicken", "brown rice", "peas"],
          "nutrition_per_serving": {
            "kcal": 640,
            "fat_g": 18.5,
            "saturated_fat_g": 6.1,
            "sugar_g": 8.2,
            "salt_g": 1.7
          },
          "ai_frequency_guess": "occasional",
          "reason": "High fat, saturated fat, and salt.",
          "consumption_frequency": "occasional",
          "frequency_reason": "High saturated fat and salt - enjoy occasionally."
        }
      }
    }
  ]
}
''';
}
