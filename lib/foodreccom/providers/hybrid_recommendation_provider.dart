//lib/foodreccom/providers/hybrid_recommendation_provider.dart
import 'package:flutter/foundation.dart';
import '../models/ingredient_model.dart';
import '../models/recipe/recipe.dart';
import '../models/cooking_history_model.dart';
import '../models/hybrid_models.dart';
import '../services/hybrid_recipe_service.dart';
import '../services/ingredient_analytics_service.dart';
import '../services/cooking_service.dart';
import '../utils/ingredient_utils.dart';
import '../utils/ingredient_translator.dart';
import '../utils/date_utils.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class HybridRecommendationProvider extends ChangeNotifier {
  final HybridRecipeService _hybridService = HybridRecipeService();
  final IngredientAnalyticsService _analyticsService =
      IngredientAnalyticsService();
  final CookingService _cookingService = CookingService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
  List<IngredientModel> _ingredients = [];
  List<CookingHistory> _cookingHistory = [];
  HybridRecommendationResult? _hybridResult;
  Map<String, dynamic> _analyticsData = {};

  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  bool _isLoadingRecommendations = false;
  bool _isLoadingIngredients = false;
  bool _isAnalyzing = false;
  String? _error;

  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ includeExternalRecipes ‡πÅ‡∏•‡πâ‡∏ß)
  int _maxExternalRecipes = 12;
  String _preferredCuisine = '';

  // -------- Getters --------
  List<IngredientModel> get ingredients => _ingredients;
  List<CookingHistory> get cookingHistory => _cookingHistory;
  HybridRecommendationResult? get hybridResult => _hybridResult;
  Map<String, dynamic> get analyticsData => _analyticsData;

  bool get isLoadingRecommendations => _isLoadingRecommendations;
  bool get isLoadingIngredients => _isLoadingIngredients;
  bool get isAnalyzing => _isAnalyzing;
  bool get isLoading =>
      _isLoadingRecommendations || _isLoadingIngredients || _isAnalyzing;
  String? get error => _error;

  int get maxExternalRecipes => _maxExternalRecipes;
  String get preferredCuisine => _preferredCuisine;

  List<RecipeModel> get allRecommendations =>
      _hybridResult?.combinedRecommendations ?? [];
  List<RecipeModel> get aiRecommendations =>
      _hybridResult?.aiRecommendations ?? [];
  List<RecipeModel> get externalRecommendations =>
      _hybridResult?.externalRecipes ?? [];
  HybridAnalysis? get hybridAnalysis => _hybridResult?.hybridAnalysis;

  // -------- Ingredient Categories --------
  List<IngredientModel> get urgentExpiryIngredients =>
      _ingredients.where((i) => i.isUrgentExpiry).toList();
  List<IngredientModel> get nearExpiryIngredients =>
      _ingredients.where((i) => i.isNearExpiry && !i.isUrgentExpiry).toList();
  List<IngredientModel> get frequentlyUsedIngredients =>
      _ingredients.where((i) => i.isFrequentlyUsed).toList();
  List<IngredientModel> get underutilizedIngredients =>
      _ingredients.where((i) => i.isUnderutilized).toList();

  List<IngredientModel> get priorityIngredients {
    final sorted = [..._ingredients];
    sorted.sort((a, b) => b.priorityScore.compareTo(a.priorityScore));
    return sorted.take(10).toList();
  }

  // -------- Recommendation Categories --------
  List<RecipeModel> get wastePreventionRecommendations {
    final wasteRisk = urgentExpiryIngredients + nearExpiryIngredients;
    if (wasteRisk.isEmpty) return [];
    return allRecommendations.where((recipe) {
      return recipe.ingredients.any((recipeIng) {
        return wasteRisk.any(
          (riskIng) => _ingredientsMatch(riskIng.name, recipeIng.name),
        );
      });
    }).toList();
  }

  List<RecipeModel> get quickRecipes =>
      allRecommendations.where((r) => r.totalTime <= 30).toList();

  List<RecipeModel> get budgetFriendlyRecipes =>
      allRecommendations.where((r) => r.tags.contains('‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î')).toList();

  // -------- Load Data --------
  Future<void> loadIngredients() async {
    if (_isLoadingIngredients) return;

    _isLoadingIngredients = true;
    _error = null;
    notifyListeners();

    try {
      final user = _auth.currentUser;
      if (user == null) throw Exception('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');

      final snapshot = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('raw_materials')
          .get();

      final debugLogsEnabled =
          (dotenv.env['DEBUG_FILTER_LOGS'] ?? 'false').trim().toLowerCase();
      final isDebug =
          debugLogsEnabled == 'true' || debugLogsEnabled == '1' || debugLogsEnabled == 'on';

      if (isDebug) {
        for (final doc in snapshot.docs) {
          final data = doc.data();
          final rawExpiry = data['expiry_date'];
          final parsedExpiry = parseDate(rawExpiry);
          final expiryLocal = DateTime(parsedExpiry.year, parsedExpiry.month, parsedExpiry.day);
          final rawType = rawExpiry == null ? 'null' : rawExpiry.runtimeType;
          print(
            'üêû [RawExpiry] ${data['name']} raw=$rawExpiry (type=$rawType) ‚Üí parsed=${parsedExpiry.toIso8601String()} (localDate=${expiryLocal.toIso8601String()})',
          );
        }
      }

      final items = snapshot.docs
          .map((doc) => IngredientModel.fromFirestore(doc.data()))
          .toList();

      _ingredients = await compute(_sortIngredients, items);

      debugPrint('‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${_ingredients.length}');
    } catch (e) {
      _error = '‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}';
      debugPrint('Error loadIngredients: $e');
    } finally {
      _isLoadingIngredients = false;
      notifyListeners();
    }
  }

  static List<IngredientModel> _sortIngredients(List<IngredientModel> items) {
    items.sort((a, b) => b.priorityScore.compareTo(a.priorityScore));
    return items;
  }

  Future<void> loadCookingHistory() async {
    try {
      _cookingHistory = await _cookingService.getCookingHistory(limitDays: 30);
    } catch (e) {
      debugPrint('Error loadCookingHistory: $e');
    }
  }

  // -------- Hybrid Recommendations --------
  Future<void> getHybridRecommendations() async {
    if (_isLoadingRecommendations) return;

    if (_ingredients.isEmpty) await loadIngredients();
    if (_ingredients.isEmpty) {
      _error = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô';
      notifyListeners();
      return;
    }

    _isLoadingRecommendations = true;
    _error = null;
    notifyListeners();

    try {
      if (_cookingHistory.isEmpty) await loadCookingHistory();

      _hybridResult = await _hybridService.getHybridRecommendations(
        _ingredients,
        cookingHistory: _cookingHistory,
        maxExternalRecipes:
            _maxExternalRecipes, // ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ includeExternalRecipes ‡πÅ‡∏•‡πâ‡∏ß
      );

      // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      if (_hybridResult != null) {
        List<RecipeModel> updateMissing(List<RecipeModel> recipes) {
          return recipes.map((r) {
            final missing = _computeMissingIngredients(r);
            return r.copyWith(missingIngredients: missing);
          }).toList();
        }

        _hybridResult!.externalRecipes =
            updateMissing(_hybridResult!.externalRecipes);
        _hybridResult!.combinedRecommendations =
            updateMissing(_hybridResult!.combinedRecommendations);
        _hybridResult!.aiRecommendations =
            updateMissing(_hybridResult!.aiRecommendations);
      }

      if (!_hybridResult!.isSuccess) {
        _error = _hybridResult!.error ?? '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
      } else if (_hybridResult!.combinedRecommendations.isEmpty) {
        _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ';
      }
    } catch (e) {
      _error = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e';
      debugPrint('Error getHybridRecommendations: $e');
    } finally {
      _isLoadingRecommendations = false;
      notifyListeners();
    }
  }

  // -------- Analytics --------
  Future<void> analyzeIngredientUsage() async {
    if (_isAnalyzing) return;
    _isAnalyzing = true;
    notifyListeners();

    try {
      _analyticsData = await _analyticsService.analyzeIngredientTrends();
    } catch (e) {
      debugPrint('Error analyzeIngredientUsage: $e');
    } finally {
      _isAnalyzing = false;
      notifyListeners();
    }
  }

  // -------- Refresh --------
  Future<void> refresh() async {
    _isLoadingRecommendations = true;
    notifyListeners();

    try {
      await Future.wait([loadIngredients(), loadCookingHistory()]);
      await Future.wait([getHybridRecommendations(), analyzeIngredientUsage()]);
    } catch (e) {
      _error = e.toString();
    } finally {
      _isLoadingRecommendations = false;
      notifyListeners();
    }
  }

  // -------- Settings --------
  void setExternalRecipeSettings({int? maxExternal, String? cuisine}) {
    bool changed = false;
    if (maxExternal != null && maxExternal != _maxExternalRecipes) {
      _maxExternalRecipes = maxExternal.clamp(1, 15);
      changed = true;
    }
    if (cuisine != null && cuisine != _preferredCuisine) {
      _preferredCuisine = cuisine;
      changed = true;
    }
    if (changed) {
      notifyListeners();
      getHybridRecommendations();
    }
  }

  // -------- Smart Shopping --------
  List<Map<String, dynamic>> getSmartShoppingList() {
    final shoppingList = <Map<String, dynamic>>[];
    final missingItems = <String>{};

    for (final recipe in allRecommendations.take(3)) {
      missingItems.addAll(recipe.missingIngredients);
    }

    for (final ingredient in frequentlyUsedIngredients) {
      if (ingredient.quantity <= 2) {
        shoppingList.add({
          'name': ingredient.name,
          'suggested_quantity': ingredient.quantity * 3,
          'unit': ingredient.unit,
          'reason': '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢',
          'priority': 'high',
          'estimated_cost': (ingredient.price ?? 0) * 3,
        });
      }
    }

    for (final item in missingItems) {
      shoppingList.add({
        'name': item,
        'reason': '‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
        'priority': 'medium',
      });
    }

    return shoppingList;
  }

  // -------- Summary --------
  Map<String, dynamic> getSummaryStats() {
    final result = _hybridResult;
    return {
      'ingredients': {
        'total': _ingredients.length,
        'urgent_expiry': urgentExpiryIngredients.length,
        'near_expiry': nearExpiryIngredients.length,
      },
      'recommendations': {
        'total': allRecommendations.length,
        'ai_generated': result?.aiRecommendationCount ?? 0,
        'from_api': result?.externalRecommendationCount ?? 0,
        'waste_prevention': wastePreventionRecommendations.length,
        'quick_recipes': quickRecipes.length,
      },
      'analytics': result?.hybridAnalysis?.toMap(),
    };
  }

  // -------- Clear --------
  void clearRecommendations() {
    _hybridResult = null;
    _error = null;
    notifyListeners();
  }

  void clearAnalytics() {
    _analyticsData = {};
    notifyListeners();
  }

  void clearAll() {
    _hybridResult = null;
    _analyticsData = {};
    _cookingHistory = [];
    _error = null;
    notifyListeners();
  }

  // -------- Helper --------
  bool _ingredientsMatch(String available, String required) {
    final a = available.toLowerCase();
    final r = required.toLowerCase();
    return a.contains(r) || r.contains(a);
  }

  // ‡πÉ‡∏ä‡πâ logic ‡∏à‡∏≤‡∏Å utils/ingredient_utils + cross-language (TH‚ÜîEN)
  List<String> _computeMissingIngredients(RecipeModel recipe) {
    final thaiInv = _ingredients.map((i) => _norm(i.name)).toList();
    final engInv = IngredientTranslator
        .translateList(_ingredients.map((i) => i.name).toList())
        .map(_norm)
        .toList();

    bool matchAny(String need) {
      final nThai = _norm(need);
      if (thaiInv.any((have) => ingredientsMatch(have, nThai))) return true;
      final nEng = _norm(IngredientTranslator.translate(need));
      if (engInv.any((have) => have.contains(nEng) || nEng.contains(have))) {
        return true;
      }
      return false;
    }

    final missing = <String>[];
    for (final ing in recipe.ingredients) {
      final need = ing.name.trim();
      if (need.isEmpty) continue;
      if (!matchAny(need)) missing.add(need);
    }

    final seen = <String>{};
    final unique = <String>[];
    for (final m in missing) {
      final key = _norm(m);
      if (seen.add(key)) unique.add(m);
    }
    return unique;
  }

  String _norm(String s) {
    var out = s.trim().toLowerCase();
    out = out.replaceAll(RegExp(r"\(.*?\)"), "");
    out = out.replaceAll(RegExp(r"\s+"), " ").trim();
    return out;
  }

  // -------- Actions: Shopping List --------
  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (shopping/inventory)
  /// - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≤‡∏Å name_key) ‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥
  /// - ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: quantity=1, unit='‡∏ä‡∏¥‡πâ‡∏ô', category='‡∏Ç‡∏≠‡∏á‡πÅ‡∏´‡πâ‡∏á'
  Future<int> addMissingIngredientsToShoppingList(RecipeModel recipe) async {
    try {
      final user = _auth.currentUser;
      if (user == null) throw Exception('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      if (recipe.missingIngredients.isEmpty) return 0;

      final col = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('raw_materials');

      int added = 0;
      for (final name in recipe.missingIngredients) {
        final key = name.trim().toLowerCase();
        if (key.isEmpty) continue;

        final exists = await col.where('name_key', isEqualTo: key).limit(1).get();
        if (exists.docs.isNotEmpty) continue;

        final guessedCategory = _guessCategory(name);
        final guessedUnit = _guessUnit(name);

        await col.add({
          'name': name.trim(),
          'name_key': key,
          'quantity': 1,
          'unit': guessedUnit,
          'unit_key': guessedUnit.toLowerCase(),
          'category': guessedCategory,
          'category_key': guessedCategory,
          'expiry_date': null,
          'price': null,
          'notes': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π: ${recipe.name}',
          'imageUrl': '',
          'created_at': FieldValue.serverTimestamp(),
          'updated_at': FieldValue.serverTimestamp(),
          'user_id': user.uid,
        });
        added++;
      }

      // reload categories/ingredients subtly if needed
      return added;
    } catch (e) {
      debugPrint('Error addMissingIngredientsToShoppingList: $e');
      rethrow;
    }
  }

  String _guessCategory(String name) {
    final n = name.trim().toLowerCase();
    const meat = ['‡πÑ‡∏Å‡πà','‡∏´‡∏°‡∏π','‡πÄ‡∏ô‡∏∑‡πâ‡∏≠','‡∏ß‡∏±‡∏ß','‡∏õ‡∏•‡∏≤','‡∏Å‡∏∏‡πâ‡∏á','‡∏´‡∏°‡∏∂‡∏Å','‡πÄ‡∏õ‡πá‡∏î','‡πÅ‡∏Æ‡∏°','‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô','pork','beef','chicken','fish','shrimp','squid'];
    const egg = ['‡πÑ‡∏Ç‡πà','egg'];
    const veg = ['‡∏ú‡∏±‡∏Å','‡∏´‡∏≠‡∏°','‡∏´‡∏±‡∏ß‡∏´‡∏≠‡∏°','‡∏ï‡πâ‡∏ô‡∏´‡∏≠‡∏°','‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°','‡∏û‡∏£‡∏¥‡∏Å','‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®','‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤','‡∏Å‡∏∞‡∏´‡∏•‡πà‡∏≥','‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó','‡πÅ‡∏ï‡∏á','‡πÄ‡∏´‡πá‡∏î','‡∏Ç‡∏¥‡∏á','‡∏Ç‡πà‡∏≤','‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ','‡πÉ‡∏ö‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î','onion','garlic','chili','tomato','cabbage','carrot','mushroom','ginger','lemongrass','lime leaf'];
    const fruit = ['‡∏ú‡∏•‡πÑ‡∏°‡πâ','‡∏Å‡∏•‡πâ‡∏ß‡∏¢','‡∏™‡πâ‡∏°','‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•','‡∏™‡∏ï‡∏£‡∏≠','‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á','‡∏™‡∏±‡∏ö‡∏õ‡∏∞‡∏£‡∏î','‡∏≠‡∏á‡∏∏‡πà‡∏ô','banana','orange','apple','strawberry','mango','pineapple','grape','lemon','lime'];
    const dairy = ['‡∏ô‡∏°','‡∏ä‡∏µ‡∏™','‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï','‡∏Ñ‡∏£‡∏µ‡∏°','‡πÄ‡∏ô‡∏¢','milk','cheese','yogurt','butter','cream'];
    const rice = ['‡∏Ç‡πâ‡∏≤‡∏ß','‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≤‡∏£','rice','‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥'];
    const spice = ['‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏®','‡∏¢‡∏µ‡πà‡∏´‡∏£‡πà‡∏≤','‡∏≠‡∏ö‡πÄ‡∏ä‡∏¢','‡∏ú‡∏á‡∏Å‡∏∞‡∏´‡∏£‡∏µ‡πà','‡∏ã‡∏¥‡∏ô‡∏ô‡∏≤‡∏°‡∏≠‡∏ô','cumin','curry powder','cinnamon','peppercorn'];
    const condiment = ['‡∏ã‡∏≠‡∏™','‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤','‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß','‡πÄ‡∏Å‡∏•‡∏∑‡∏≠','‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•','‡∏ú‡∏á‡∏ä‡∏π‡∏£‡∏™','‡πÄ‡∏ï‡πâ‡∏≤‡πÄ‡∏à‡∏µ‡πâ‡∏¢‡∏ß','‡∏ã‡∏≠‡∏™‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®','‡∏°‡∏≤‡∏¢‡∏≠‡∏á‡πÄ‡∏ô‡∏™','‡∏ã‡∏≠‡∏™‡∏´‡∏≠‡∏¢‡∏ô‡∏≤‡∏á‡∏£‡∏°','sauce','fish sauce','soy','salt','sugar','ketchup','mayonnaise','oyster sauce'];
    const flour = ['‡πÅ‡∏õ‡πâ‡∏á','‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á','‡πÄ‡∏™‡πâ‡∏ô','‡∏û‡∏≤‡∏™‡∏ï‡πâ‡∏≤','noodle','pasta','flour','bread'];
    const oil = ['‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô','olive oil','vegetable oil','oil'];
    const drink = ['‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏°','‡πÇ‡∏ã‡∏î‡∏≤','‡∏Å‡∏≤‡πÅ‡∏ü','‡∏ä‡∏≤','juice','soda','coffee','tea'];
    const frozen = ['‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á','frozen'];

    bool any(List<String> list) => list.any((k) => n.contains(k));

    if (any(meat)) return '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå';
    if (any(egg)) return '‡πÑ‡∏Ç‡πà';
    if (any(dairy)) return '‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å‡∏ô‡∏°';
    if (any(rice)) return '‡∏Ç‡πâ‡∏≤‡∏ß';
    if (any(spice)) return '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏®';
    if (any(condiment)) return '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á';
    if (any(flour)) return '‡πÅ‡∏õ‡πâ‡∏á';
    if (any(oil)) return '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô';
    if (any(drink)) return '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°';
    if (any(frozen)) return '‡∏Ç‡∏≠‡∏á‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á';
    if (any(veg)) return '‡∏ú‡∏±‡∏Å';
    if (any(fruit)) return '‡∏ú‡∏•‡πÑ‡∏°‡πâ';
    return '‡∏Ç‡∏≠‡∏á‡πÅ‡∏´‡πâ‡∏á';
  }

  String _guessUnit(String name) {
    final n = name.trim().toLowerCase();
    if (n.contains('‡πÑ‡∏Ç‡πà') || n.contains('egg')) return '‡∏ü‡∏≠‡∏á';
    if (n.contains('‡∏ô‡∏°') || n.contains('‡∏ã‡∏≠‡∏™') || n.contains('‡∏ô‡πâ‡∏≥') || n.contains('‡∏Ñ‡∏£‡∏µ‡∏°') || n.contains('milk') || n.contains('sauce')) {
      return '‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£';
    }
    if (n.contains('‡∏Ç‡∏ß‡∏î') || n.contains('‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á')) return '‡∏ä‡∏¥‡πâ‡∏ô';
    return '‡∏Å‡∏£‡∏±‡∏°';
  }
}
