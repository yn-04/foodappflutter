// lib/rawmaterial/widgets/shopping_item_card.dart
import 'package:flutter/material.dart';
import 'package:my_app/rawmaterial/constants/categories.dart';
import 'package:my_app/rawmaterial/constants/units.dart';
import 'package:my_app/rawmaterial/models/shopping_item.dart';

class ShoppingItemCard extends StatelessWidget {
  final ShoppingItem item;
  final VoidCallback? onTap;

  // ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏µ onDelete ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á)
  final Future<void> Function()? onDelete;

  // ‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å usage_logs + ‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0)
  // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
  final Future<void> Function(int usedQty, String usedUnit)? onUseUp;

  final VoidCallback? onQuickUse;

  /// ‡∏ñ‡πâ‡∏≤ true (default) -> ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô "‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß"
  /// ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö onUseUp
  final bool confirmUseUp;

  /// ‡πÄ‡∏î‡∏¥‡∏°: ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward-compat)
  final bool confirmDelete;

  /// ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
  final int? groupTotalQuantity;
  final String? groupUnit;
  final String? groupCategory;
  final DateTime? groupEarliestExpiry;

  const ShoppingItemCard({
    Key? key,
    required this.item,
    this.onTap,
    this.onDelete,
    this.onQuickUse,

    // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    this.onUseUp,
    this.confirmUseUp = true,

    this.groupTotalQuantity,
    this.groupUnit,
    this.groupCategory,
    this.groupEarliestExpiry,

    // ‡πÄ‡∏î‡∏¥‡∏°
    this.confirmDelete = true,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final int displayQty = groupTotalQuantity ?? item.quantity;
    final String displayUnit = Units.safe(groupUnit ?? item.unit);
    final String displayCategory = groupCategory ?? item.category;
    final DateTime? displayExpiry = groupEarliestExpiry ?? item.expiryDate;

    int? d;
    if (displayExpiry != null) {
      final today = DateTime.now();
      final onlyToday = DateTime(today.year, today.month, today.day);
      final onlyExpiry = DateTime(
        displayExpiry.year,
        displayExpiry.month,
        displayExpiry.day,
      );
      d = onlyExpiry.difference(onlyToday).inDays;
    }

    Color? statusColor;
    String? statusText;
    if (d == null) {
      statusColor = Colors.grey;
      statusText = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏';
    } else if (d < 0) {
      statusColor = null;
      statusText = null;
    } else if (d == 0) {
      statusColor = Colors.red;
      statusText = '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
    } else if (d == 1) {
      statusColor = Colors.red;
      statusText = '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 1 ‡∏ß‡∏±‡∏ô';
    } else if (d == 2 || d == 3) {
      statusColor = Colors.orange;
      statusText = '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å $d ‡∏ß‡∏±‡∏ô';
    } else {
      statusColor = Colors.green;
      statusText = '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å $d ‡∏ß‡∏±‡∏ô';
    }

    return InkWell(
      onTap: onTap,
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          boxShadow: const [BoxShadow(color: Colors.black12, blurRadius: 6)],
        ),
        child: Row(
          children: [
            CircleAvatar(
              backgroundColor: Colors.grey[200],
              child: Icon(
                Categories.iconFor(displayCategory),
                color: Colors.grey[700],
              ),
            ),
            const SizedBox(width: 12),

            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    item.name,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '$displayQty $displayUnit ‚Ä¢ $displayCategory',
                    style: TextStyle(color: Colors.grey[700], fontSize: 13),
                  ),
                  const SizedBox(height: 4),
                  if (statusText != null && statusColor != null)
                    Row(
                      children: [
                        Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 8,
                            vertical: 3,
                          ),
                          decoration: BoxDecoration(
                            // ignore: deprecated_member_use
                            color: statusColor.withValues(alpha: 0.12),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(
                            statusText,
                            style: TextStyle(
                              color: statusColor,
                              fontWeight: FontWeight.w600,
                              fontSize: 12,
                            ),
                          ),
                        ),
                      ],
                    ),
                ],
              ),
            ),

            // ‡∏õ‡∏∏‡πà‡∏° ‚Äú‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‚Äù (‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö)
            IconButton(
              icon: Icon(
                onUseUp != null
                    ? Icons.inventory_2_outlined
                    : Icons.delete_outline,
                color: Colors.grey[700],
              ),
              tooltip: onUseUp != null ? '‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß' : '‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
              onPressed: () async {
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ onUseUp ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ flow ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
                if (onUseUp != null) {
                  if (confirmUseUp) {
                    final ok = await showDialog<bool>(
                      context: context,
                      builder: (_) => AlertDialog(
                        title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß'),
                        content: Text(
                          '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ "${item.name}" ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n',
                        ),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.pop(context, false),
                            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                          ),
                          TextButton(
                            onPressed: () => Navigator.pop(context, true),
                            child: Text(
                              '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                              style: TextStyle(color: Colors.grey[700]),
                            ),
                          ),
                        ],
                      ),
                    );
                    if (ok != true) return;
                  }
                  await onUseUp!(displayQty, displayUnit);
                  return;
                }

                // fallback: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ onUseUp ‚Üí ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                if (onDelete == null) return;

                if (!confirmDelete) {
                  await onDelete!();
                  return;
                }

                final ok = await showDialog<bool>(
                  context: context,
                  builder: (_) => AlertDialog(
                    title: const Text('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'),
                    content: Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${item.name}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.pop(context, false),
                        child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                      ),
                      TextButton(
                        onPressed: () => Navigator.pop(context, true),
                        child: Text(
                          '‡∏•‡∏ö',
                          style: TextStyle(color: Colors.grey[700]),
                        ),
                      ),
                    ],
                  ),
                );
                if (ok == true) {
                  await onDelete!();
                }
              },
            ),
            const SizedBox(width: 8),

            // ‡∏õ‡∏∏‡πà‡∏° "‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢"
            SizedBox(
              height: 30,
              child: TextButton.icon(
                style: TextButton.styleFrom(
                  padding: const EdgeInsets.symmetric(horizontal: 10),
                  backgroundColor: const Color.fromARGB(255, 255, 255, 255),
                  foregroundColor: Colors.black,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                    side: BorderSide(color: Colors.grey[700]!),
                  ),
                ),
                icon: Icon(
                  Icons.restaurant_menu,
                  size: 16,
                  color: Colors.grey[700],
                ),
                label: const Text(
                  '‡πÉ‡∏ä‡πâ',
                  style: TextStyle(fontSize: 12, fontWeight: FontWeight.w700),
                ),
                onPressed: onQuickUse,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
