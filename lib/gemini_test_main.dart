// lib/gemini_test_main.dart
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:google_generative_ai/google_generative_ai.dart';

void main() {
  runApp(GeminiTestApp());
}

class GeminiTestApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gemini API Test',
      home: GeminiTestPage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class GeminiTestPage extends StatefulWidget {
  @override
  _GeminiTestPageState createState() => _GeminiTestPageState();
}

class _GeminiTestPageState extends State<GeminiTestPage> {
  static const String _apiKey = 'AIzaSyCy1cWTsLIlBDsY1BfaUpgUw5ArL_aSrc0';
  late final GenerativeModel _model;

  String _output = '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gemini AI';
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _model = GenerativeModel(
      model: 'gemini-1.5-flash',
      apiKey: _apiKey,
      generationConfig: GenerationConfig(
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 2048,
      ),
    );
  }

  Future<void> _testGeminiAPI() async {
    setState(() {
      _isLoading = true;
      _output = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gemini AI...\n';
    });

    try {
      final prompt = '''
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏ü‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 3 ‡πÄ‡∏°‡∏ô‡∏π ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠

**‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ**:
- ‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà: 3 ‡∏ü‡∏≠‡∏á
- ‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢: 2 ‡∏ñ‡πâ‡∏ß‡∏¢
- ‡∏´‡∏≠‡∏°‡πÉ‡∏´‡∏ç‡πà: 1 ‡∏´‡∏±‡∏ß

**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à**: 
1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô:
   - Wongnai (‡πÄ‡∏ß‡πá‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢)
   - Cookpad (‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á)
   - Chef's Table YouTube channel
   - ‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏á
   - ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ü‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û

2. ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á

**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**:
{
  "recommendations": [
    {
      "menu_name": "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà",
      "description": "‡πÄ‡∏°‡∏ô‡∏π‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡πÑ‡∏Ç‡πà‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏ß ‡∏™‡∏π‡∏ï‡∏£‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°",
      "match_score": 85,
      "ingredients": [
        {"name": "‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà", "amount": 2, "unit": "‡∏ü‡∏≠‡∏á"},
        {"name": "‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢", "amount": 1, "unit": "‡∏ñ‡πâ‡∏ß‡∏¢"},
        {"name": "‡∏´‡∏≠‡∏°‡πÉ‡∏´‡∏ç‡πà", "amount": 0.5, "unit": "‡∏´‡∏±‡∏ß"}
      ],
      "steps": [
        {"step_number": 1, "instruction": "‡∏ï‡∏µ‡πÑ‡∏Ç‡πà‡πÉ‡∏™‡πà‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", "time_minutes": 2},
        {"step_number": 2, "instruction": "‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å ‡∏ï‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô", "time_minutes": 3},
        {"step_number": 3, "instruction": "‡∏ú‡∏±‡∏î‡∏´‡∏≠‡∏°‡πÉ‡∏´‡∏ç‡πà ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≤‡∏ß ‡∏ú‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô", "time_minutes": 5}
      ],
      "cooking_time": 10,
      "prep_time": 5,
      "difficulty": "‡∏á‡πà‡∏≤‡∏¢",
      "servings": 2,
      "category": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å",
      "nutrition": {
        "calories": 350,
        "protein": 14,
        "carbs": 40,
        "fat": 12
      },
      "source_name": "Wongnai Recipe",
      "source_url": "https://www.wongnai.com/recipes/fried-rice-with-egg",
      "source_type": "website",
      "chef_name": "Chef Sarawut",
      "tags": ["‡∏á‡πà‡∏≤‡∏¢", "‡πÑ‡∏ß", "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î"]
    }
  ]
}

**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å**: 
- amount ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏ä‡πà‡∏ß‡∏á ‡πÄ‡∏ä‡πà‡∏ô 5-10)
- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ source_name ‡πÅ‡∏•‡∏∞ source_url
- source_type: "website", "youtube", "cookbook", "blog"
- ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏ü‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏π‡∏ï‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
- ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô
- ‡πÉ‡∏™‡πà steps ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢
''';

      final stopwatch = Stopwatch()..start();

      final response = await _model
          .generateContent([Content.text(prompt)])
          .timeout(Duration(seconds: 30));

      stopwatch.stop();

      _addOutput('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô ${stopwatch.elapsed.inSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n');

      if (response.text == null || response.text!.isEmpty) {
        _addOutput('‚ùå AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö\n');
        return;
      }

      final responseText = response.text!;
      _addOutput('üìÑ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI:\n');
      _addOutput('=' * 50 + '\n');
      _addOutput('$responseText\n');
      _addOutput('=' * 50 + '\n');

      // Clean JSON
      final cleanedJson = _cleanResponse(responseText);
      _addOutput('\nüîß JSON ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß:\n');
      _addOutput('-' * 30 + '\n');
      _addOutput('$cleanedJson\n');
      _addOutput('-' * 30 + '\n');

      // Test Parse
      await _testJsonParsing(cleanedJson);
    } catch (e) {
      _addOutput('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e\n');

      if (e.toString().contains('PERMISSION_DENIED')) {
        _addOutput('üîë ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n');
      } else if (e.toString().contains('TimeoutException')) {
        _addOutput('‚è±Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: AI ‡∏ï‡∏≠‡∏ö‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n');
      }
    }

    setState(() {
      _isLoading = false;
    });
  }

  void _addOutput(String text) {
    setState(() {
      _output += text;
    });
  }

  String _cleanResponse(String response) {
    String clean = response
        .replaceAll('```json', '')
        .replaceAll('```', '')
        .trim();

    final start = clean.indexOf('{');
    final end = clean.lastIndexOf('}') + 1;

    if (start != -1 && end > start) {
      clean = clean.substring(start, end);
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç amount ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô range
    clean = clean.replaceAllMapped(
      RegExp(r'"amount":\s*(\d+)-(\d+)'),
      (match) => '"amount": "${match.group(1)}-${match.group(2)}"',
    );

    clean = clean.replaceAll(RegExp(r',(\s*[}\]])'), r'$1');

    return clean;
  }

  Future<void> _testJsonParsing(String jsonString) async {
    try {
      final jsonData = json.decode(jsonString);
      _addOutput('\n‚úÖ JSON Parse ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n');

      if (jsonData['recommendations'] == null) {
        _addOutput('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ recommendations field\n');
        return;
      }

      final recommendations = jsonData['recommendations'] as List;
      _addOutput('üìä ‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${recommendations.length} ‡πÄ‡∏°‡∏ô‡∏π\n\n');

      for (int i = 0; i < recommendations.length; i++) {
        final menu = recommendations[i];
        _addOutput(
          'üçΩÔ∏è  ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà ${i + 1}: ${menu['menu_name'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}\n',
        );
        _addOutput('   üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${menu['description'] ?? ''}\n');
        _addOutput('   ‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${menu['match_score'] ?? 0}\n');
        _addOutput('   ‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥: ${menu['cooking_time'] ?? 0} ‡∏ô‡∏≤‡∏ó‡∏µ\n');
        _addOutput('   üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: ${menu['difficulty'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n');
        _addOutput('   üçΩÔ∏è  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: ${menu['servings'] ?? 0} ‡∏ó‡∏µ‡πà\n');

        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        if (menu['source_name'] != null || menu['source_url'] != null) {
          _addOutput('   üìö ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:\n');
          if (menu['source_name'] != null) {
            _addOutput('      ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${menu['source_name']}\n');
          }
          if (menu['source_url'] != null &&
              menu['source_url'].toString().isNotEmpty) {
            _addOutput('      ‚Ä¢ URL: ${menu['source_url']}\n');
          }
          if (menu['source_type'] != null) {
            _addOutput('      ‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${menu['source_type']}\n');
          }
          if (menu['chef_name'] != null) {
            _addOutput('      ‚Ä¢ ‡πÄ‡∏ä‡∏ü/‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô: ${menu['chef_name']}\n');
          }
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
        if (menu['ingredients'] != null) {
          final ingredients = menu['ingredients'] as List;
          _addOutput('   ü•¨ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (${ingredients.length} ‡∏≠‡∏¢‡πà‡∏≤‡∏á):\n');

          for (var ing in ingredients) {
            final amount = ing['amount'];
            final amountType = amount.runtimeType.toString();
            _addOutput(
              '      ‚Ä¢ ${ing['name']}: $amount ${ing['unit']} ($amountType)\n',
            );

            if (amount is String && amount.contains('-')) {
              _addOutput('        ‚ö†Ô∏è  WARNING: ‡∏û‡∏ö range amount!\n');
            }
          }
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥
        if (menu['steps'] != null) {
          final steps = menu['steps'] as List;
          _addOutput('   üë®‚Äçüç≥ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ (${steps.length} ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô):\n');

          for (var step in steps) {
            final stepNum = step['step_number'] ?? 0;
            final instruction = step['instruction'] ?? '';
            final timeMinutes = step['time_minutes'] ?? 0;
            _addOutput('      $stepNum. $instruction ($timeMinutes ‡∏ô‡∏≤‡∏ó‡∏µ)\n');
          }
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
        if (menu['nutrition'] != null) {
          final nutrition = menu['nutrition'];
          _addOutput('   üìä ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ (‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà):\n');
          if (nutrition['calories'] != null) {
            final caloriesPerServing =
                (nutrition['calories'] / (menu['servings'] ?? 1));
            _addOutput('      ‚Ä¢ ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ: ${caloriesPerServing.round()} kcal\n');
          }
          if (nutrition['protein'] != null) {
            _addOutput('      ‚Ä¢ ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: ${nutrition['protein']} g\n');
          }
          if (nutrition['carbs'] != null) {
            _addOutput('      ‚Ä¢ ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï: ${nutrition['carbs']} g\n');
          }
        }

        // ‡πÅ‡∏™‡∏î‡∏á tags
        if (menu['tags'] != null) {
          final tags = menu['tags'] as List;
          _addOutput('   üè∑Ô∏è  ‡πÅ‡∏ó‡πá‡∏Å: ${tags.join(', ')}\n');
        }

        _addOutput('\n');
      }

      _addOutput('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n');
    } catch (parseError) {
      _addOutput('\n‚ùå JSON Parse ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $parseError\n');
      _addOutput('üí° ‡∏≠‡∏≤‡∏à‡∏°‡∏µ amount ‡πÄ‡∏õ‡πá‡∏ô range ‡∏´‡∏£‡∏∑‡∏≠ JSON ‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö\n');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('üß™ Gemini API Test'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            ElevatedButton(
              onPressed: _isLoading ? null : _testGeminiAPI,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
              ),
              child: _isLoading
                  ? Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(
                              Colors.white,
                            ),
                          ),
                        ),
                        SizedBox(width: 12),
                        Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...'),
                      ],
                    )
                  : Text('üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gemini AI'),
            ),
            SizedBox(height: 16),
            Expanded(
              child: Container(
                width: double.infinity,
                padding: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: SingleChildScrollView(
                  child: SelectableText(
                    _output,
                    style: TextStyle(fontFamily: 'Courier New', fontSize: 14),
                  ),
                ),
              ),
            ),
            SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _output = '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gemini AI';
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey[600],
                      foregroundColor: Colors.white,
                    ),
                    child: Text('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
