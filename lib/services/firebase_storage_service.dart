// firebase_storage_service.dart - ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firebase Storage
import 'dart:io';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

/// ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firebase Storage ‡πÅ‡∏•‡∏∞ User Profile
class FirebaseStorageService {
  static final FirebaseStorage _storage = FirebaseStorage.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Storage
  static Future<bool> checkConnection() async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        print('DEBUG: User not authenticated');
        return false;
      }

      print('DEBUG: Storage bucket: ${_storage.bucket}');
      print('DEBUG: User authenticated: ${user.uid}');

      return true;
    } catch (e) {
      print('DEBUG: Storage connection check failed: $e');
      return false;
    }
  }

  /// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏á‡πà‡∏≤‡∏¢‡πÜ
  static Future<void> testConnection() async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        print('‚ùå User not logged in');
        return;
      }

      print('=== TESTING STORAGE CONNECTION ===');
      print('‚úÖ User authenticated: ${user.uid}');
      print('‚úÖ User email: ${user.email}');

      print('‚úÖ Storage instance created');
      print('‚úÖ Storage bucket: ${_storage.bucket}');

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á reference
      final testRef = _storage.ref().child(
        'test_${DateTime.now().millisecondsSinceEpoch}.txt',
      );
      print('‚úÖ Reference created: ${testRef.fullPath}');

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      final testData = 'Hello Firebase Storage!';
      await testRef.putString(testData);
      print('‚úÖ String upload successful');

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î URL
      final downloadURL = await testRef.getDownloadURL();
      print('‚úÖ Download URL: $downloadURL');

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await testRef.delete();
      print('‚úÖ Test file deleted');

      print('üéâ Storage connection test PASSED!');
    } catch (e) {
      print('‚ùå Storage connection test FAILED: $e');
      rethrow;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  static Future<String> uploadProfileImage({
    required File imageFile,
    required String userId,
  }) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login
      final user = _auth.currentUser;
      if (user == null) {
        throw StorageException('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
      if (!imageFile.existsSync()) {
        throw StorageException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
      }

      final fileSize = imageFile.lengthSync();
      print('DEBUG: Starting image upload...');
      print('DEBUG: User UID: ${user.uid}');
      print('DEBUG: File size: $fileSize bytes');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (5MB = 5 * 1024 * 1024 bytes)
      if (fileSize > 5 * 1024 * 1024) {
        throw StorageException('‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÄ‡∏Å‡∏¥‡∏ô 5MB)');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà unique
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'profile_${userId}_$timestamp.jpg';

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Storage Reference
      final storageRef = _storage
          .ref()
          .child('users')
          .child(userId)
          .child(fileName);

      print('DEBUG: Upload path: ${storageRef.fullPath}');

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
      await _deleteOldProfileImages(userId);

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
      print('DEBUG: Starting upload...');
      final uploadTask = await storageRef.putFile(
        imageFile,
        SettableMetadata(
          contentType: 'image/jpeg',
          customMetadata: {
            'uploaded_by': userId,
            'uploaded_at': DateTime.now().toIso8601String(),
            'file_size': fileSize.toString(),
            'upload_type': 'profile_image',
          },
        ),
      );

      // ‡∏î‡∏∂‡∏á Download URL
      final downloadURL = await uploadTask.ref.getDownloadURL();
      print('DEBUG: Upload successful, URL: $downloadURL');

      return downloadURL;
    } on FirebaseException catch (e) {
      print('Firebase Storage Error: ${e.code} - ${e.message}');
      throw StorageException(_getFirebaseErrorMessage(e));
    } catch (e) {
      print('General Upload Error: $e');
      throw StorageException('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: $e');
    }
  }

  /// ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
  static Future<void> _deleteOldProfileImages(String userId) async {
    try {
      final userRef = _storage.ref().child('users').child(userId);
      final listResult = await userRef.listAll();

      for (final item in listResult.items) {
        if (item.name.startsWith('profile_')) {
          await item.delete();
          print('DEBUG: Deleted old file: ${item.name}');
        }
      }
    } catch (e) {
      print('DEBUG: Could not delete old files (this is normal): $e');
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Auth + Firestore)
  static Future<void> updateUserProfile({
    required String displayName,
    String? photoURL,
  }) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw ProfileException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      print('DEBUG: Updating user profile...');

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firebase Auth Profile
      await user.updateDisplayName(displayName);
      if (photoURL != null) {
        await user.updatePhotoURL(photoURL);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore
      await _updateFirestoreProfile(
        uid: user.uid,
        displayName: displayName,
        photoURL: photoURL,
        email: user.email,
      );

      // Reload user data
      await user.reload();
      print('DEBUG: Profile update completed');
    } catch (e) {
      print('Error updating profile: $e');
      rethrow;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore
  static Future<void> _updateFirestoreProfile({
    required String uid,
    required String displayName,
    String? photoURL,
    String? email,
  }) async {
    try {
      final docRef = _firestore.collection('users').doc(uid);
      final docSnapshot = await docRef.get();

      final data = {
        'displayName': displayName,
        'email': email,
        'updatedAt': FieldValue.serverTimestamp(),
        'lastActiveAt': FieldValue.serverTimestamp(),
      };

      if (photoURL != null) {
        data['photoURL'] = photoURL;
        data['hasCustomPhoto'] = true;
      }

      if (docSnapshot.exists) {
        await docRef.update(data);
        print('DEBUG: Firestore document updated');
      } else {
        data['createdAt'] = FieldValue.serverTimestamp();
        data['profileVersion'] = 1;
        await docRef.set(data);
        print('DEBUG: New Firestore document created');
      }
    } catch (e) {
      print('Error updating Firestore: $e');
      throw ProfileException('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ (‡∏£‡∏π‡∏õ + ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  static Future<void> updateCompleteProfile({
    required String displayName,
    File? imageFile,
  }) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw ProfileException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      String? downloadURL;

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (imageFile != null) {
        downloadURL = await uploadProfileImage(
          imageFile: imageFile,
          userId: user.uid,
        );
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
      await updateUserProfile(displayName: displayName, photoURL: downloadURL);
    } catch (e) {
      print('Error in complete profile update: $e');
      rethrow;
    }
  }

  /// ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ Firebase Error
  static String _getFirebaseErrorMessage(FirebaseException e) {
    switch (e.code) {
      case 'storage/unauthorized':
        return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage Rules';
      case 'storage/object-not-found':
        return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage Rules';
      case 'storage/bucket-not-found':
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö Storage Bucket - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ';
      case 'storage/quota-exceeded':
        return '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ï‡πá‡∏°';
      case 'storage/unauthenticated':
        return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
      case 'storage/retry-limit-exceeded':
        return '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
      case 'storage/invalid-format':
        return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      default:
        return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: ${e.message}';
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  static bool isValidImage(File imageFile) {
    try {
      if (!imageFile.existsSync()) return false;

      final fileSize = imageFile.lengthSync();
      final fileSizeInMB = fileSize / (1024 * 1024);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)
      if (fileSizeInMB > 5.0) return false;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
      final fileName = imageFile.path.toLowerCase();
      final validExtensions = ['.jpg', '.jpeg', '.png'];

      return validExtensions.any((ext) => fileName.endsWith(ext));
    } catch (e) {
      print('Error validating image: $e');
      return false;
    }
  }
}

/// Custom Exception ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Storage
class StorageException implements Exception {
  final String message;
  StorageException(this.message);

  @override
  String toString() => message;
}

/// Custom Exception ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Profile
class ProfileException implements Exception {
  final String message;
  ProfileException(this.message);

  @override
  String toString() => message;
}
