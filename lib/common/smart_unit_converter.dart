// lib/common/smart_unit_converter.dart
import 'measurement_constants.dart';

class PieceUnitInfo {
  final List<String> keywords;
  final String displayUnit;
  final double gramsPerUnit;
  final List<String> unitSynonyms;

  const PieceUnitInfo({
    required this.keywords,
    required this.displayUnit,
    required this.gramsPerUnit,
    this.unitSynonyms = const [],
  });

  bool matchesName(String lowerName) =>
      keywords.any((keyword) => lowerName.contains(keyword));

  bool matchesUnit(String lowerUnit) {
    final syns = <String>{
      displayUnit,
      ...unitSynonyms,
    }.map((s) => s.trim().toLowerCase()).toSet();
    return syns.contains(lowerUnit);
  }
}

class SmartUnitConverter {
  // üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î rule ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏¥‡πâ‡∏ô"
  static final List<PieceUnitInfo> _pieceRules = [
    const PieceUnitInfo(
      keywords: ['‡πÑ‡∏Ç‡πà', 'egg'],
      displayUnit: '‡∏ü‡∏≠‡∏á',
      gramsPerUnit: 50,
      unitSynonyms: ['egg', 'eggs'],
    ),
    const PieceUnitInfo(
      keywords: ['‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°', 'garlic'],
      displayUnit: '‡∏Å‡∏•‡∏µ‡∏ö',
      gramsPerUnit: 5,
      unitSynonyms: ['clove', 'cloves'],
    ),
    const PieceUnitInfo(
      keywords: ['‡∏ï‡πâ‡∏ô‡∏´‡∏≠‡∏°', 'scallion', 'spring onion', 'green onion'],
      displayUnit: '‡∏ï‡πâ‡∏ô',
      gramsPerUnit: 15,
      unitSynonyms: ['stalk', 'stalks'],
    ),
    const PieceUnitInfo(
      keywords: ['‡∏´‡∏≠‡∏°‡πÉ‡∏´‡∏ç‡πà', '‡∏´‡∏±‡∏ß‡∏´‡∏≠‡∏°', '‡∏´‡∏≠‡∏°‡πÅ‡∏î‡∏á', 'onion', 'shallot'],
      displayUnit: '‡∏´‡∏±‡∏ß',
      gramsPerUnit: 167,
      unitSynonyms: ['onions', 'shallots'],
    ),
    const PieceUnitInfo(
      keywords: ['‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®', 'tomato'],
      displayUnit: '‡∏•‡∏π‡∏Å',
      gramsPerUnit: 125,
      unitSynonyms: ['tomatoes', '‡∏ú‡∏•'],
    ),
    const PieceUnitInfo(
      keywords: ['‡∏°‡∏∞‡∏ô‡∏≤‡∏ß', 'lime', 'lemon'],
      displayUnit: '‡∏•‡∏π‡∏Å',
      gramsPerUnit: 60,
      unitSynonyms: ['limes', 'lemons', '‡∏ú‡∏•'],
    ),
    const PieceUnitInfo(
      keywords: ['‡∏û‡∏£‡∏¥‡∏Å', 'chili', 'chilli', 'pepper'],
      displayUnit: '‡πÄ‡∏°‡πá‡∏î',
      gramsPerUnit: 4,
      unitSynonyms: ['chilies', 'chiles', '‡πÄ‡∏°‡∏•‡πá‡∏î'],
    ),
    const PieceUnitInfo(
      keywords: ['‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó', 'carrot'],
      displayUnit: '‡∏´‡∏±‡∏ß',
      gramsPerUnit: 130,
      unitSynonyms: ['carrots', '‡∏ú‡∏•'],
    ),
    const PieceUnitInfo(
      keywords: ['‡∏Å‡∏•‡πâ‡∏ß‡∏¢', 'banana'],
      displayUnit: '‡∏•‡∏π‡∏Å',
      gramsPerUnit: 120,
      unitSynonyms: ['bananas', '‡∏ú‡∏•'],
    ),
    const PieceUnitInfo(
      keywords: ['‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•', 'apple'],
      displayUnit: '‡∏•‡∏π‡∏Å',
      gramsPerUnit: 180,
      unitSynonyms: ['apples', '‡∏ú‡∏•'],
    ),
    const PieceUnitInfo(
      keywords: ['‡∏Å‡∏∏‡πâ‡∏á', 'shrimp', 'prawn'],
      displayUnit: '‡∏ï‡∏±‡∏ß',
      gramsPerUnit: 15,
      unitSynonyms: ['shrimps', 'prawns'],
    ),
    const PieceUnitInfo(
      keywords: ['‡πÄ‡∏´‡πá‡∏î', 'mushroom'],
      displayUnit: '‡∏î‡∏≠‡∏Å',
      gramsPerUnit: 20,
      unitSynonyms: ['mushrooms'],
    ),
  ];

  // üî∏ Rule ‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ keyword)
  static const PieceUnitInfo _fallbackPieceRule = PieceUnitInfo(
    keywords: [],
    displayUnit: '‡∏ä‡∏¥‡πâ‡∏ô',
    gramsPerUnit: 50,
    unitSynonyms: ['piece', 'pieces', 'pc', 'pcs', 'slice', 'slices'],
  );

  // üî∏ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏à‡∏≠
  static final Set<String> _genericPieceUnits = {
    '‡∏ä‡∏¥‡πâ‡∏ô',
    'pcs',
    'pc',
    'piece',
    'pieces',
    'unit',
    '‡∏•‡∏π‡∏Å',
    '‡∏ú‡∏•',
    '‡∏´‡∏±‡∏ß',
    '‡∏Å‡∏•‡∏µ‡∏ö',
    '‡πÄ‡∏°‡πá‡∏î',
    '‡πÉ‡∏ö',
    '‡∏ï‡πâ‡∏ô',
    '‡∏Å‡πâ‡∏≤‡∏ô',
    '‡∏î‡∏≠‡∏Å',
    '‡∏ï‡∏±‡∏ß',
    '‡∏ü‡∏≠‡∏á',
    'slice',
    'slices',
    'egg',
    'eggs',
  };

  static String _normalize(String value) => value.trim().toLowerCase();

  static PieceUnitInfo? _ruleForName(String lowerName) {
    for (final rule in _pieceRules) {
      if (rule.matchesName(lowerName)) return rule;
    }
    return null;
  }

  static PieceUnitInfo? _ruleForUnit(String lowerUnit, String lowerName) {
    for (final rule in _pieceRules) {
      if (rule.matchesUnit(lowerUnit)) return rule;
    }
    final byName = _ruleForName(lowerName);
    final isGenericPiece =
        lowerUnit.isEmpty || _genericPieceUnits.contains(lowerUnit);
    if (!isGenericPiece) {
      // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏ä‡∏¥‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ logic ‡∏ù‡∏±‡πà‡∏á‡∏Å‡∏£‡∏±‡∏°/‡∏°‡∏• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
      return null;
    }
    if (byName != null) {
      return byName;
    }
    return _fallbackPieceRule;
  }

  /// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏±‡∏° (‡∏ï‡∏≤‡∏° rule)
  static double? gramsFromPiece(
    double amount,
    String unit,
    String ingredientName,
  ) {
    final lowerUnit = _normalize(unit);
    final lowerName = _normalize(ingredientName);
    final rule = _ruleForUnit(lowerUnit, lowerName);
    if (rule == null || rule.gramsPerUnit <= 0) return null;
    final grams = amount * rule.gramsPerUnit;
    return roundGrams(grams);
  }

  /// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ "‡∏ä‡∏¥‡πâ‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isPieceUnit(String unit) =>
      _genericPieceUnits.contains(_normalize(unit)) ||
      _pieceRules.any((rule) => rule.matchesUnit(_normalize(unit)));

  /// ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏±‡∏°‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô
  static double? gramsPerPiece(String ingredientName) {
    final rule = _ruleForName(_normalize(ingredientName));
    return rule?.gramsPerUnit;
  }

  /// ‚úÖ ‡∏´‡∏≤ rule ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
  static PieceUnitInfo? pieceRuleFor(String ingredientName, [String? unit]) {
    final lowerName = _normalize(ingredientName);
    if (unit != null) {
      final byUnit = _ruleForUnit(_normalize(unit), lowerName);
      if (byUnit != null) return byUnit;
    }
    return _ruleForName(lowerName);
  }

  /// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏£‡∏±‡∏° ‚Üí ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  static SmartUnitResult gramsToPreferred(double grams, String ingredientName) {
    final rule = pieceRuleFor(ingredientName);
    if (rule != null) {
      final pieces = grams / rule.gramsPerUnit;
      if (pieces <= 50) {
        return SmartUnitResult(pieces, rule.displayUnit);
      }
    }
    if (grams >= MeasurementConstants.gramsPerKilogram) {
      return SmartUnitResult(
        grams / MeasurementConstants.gramsPerKilogram,
        '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°',
      );
    }
    return SmartUnitResult(roundGrams(grams), '‡∏Å‡∏£‡∏±‡∏°');
  }

  /// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£ ‚Üí ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  static SmartUnitResult millilitersToPreferred(
    double ml,
    String ingredientName,
  ) {
    if (ml >= 1000) {
      return SmartUnitResult(ml / 1000, '‡∏•‡∏¥‡∏ï‡∏£');
    } else if (ml >= 15) {
      final tbsp = ml / 15;
      if (tbsp <= 50) return SmartUnitResult(tbsp, '‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞');
    } else if (ml >= 5) {
      final tsp = ml / 5;
      if (tsp <= 50) return SmartUnitResult(tsp, '‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤');
    }
    return SmartUnitResult(ml, '‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£');
  }

  /// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏£‡∏±‡∏° ‚Üí ‡∏ä‡∏¥‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ rule)
  static double? convertGramsToPiece(
    double grams,
    String targetUnit,
    String ingredientName,
  ) {
    final lowerUnit = _normalize(targetUnit);
    final lowerName = _normalize(ingredientName);
    final rule = pieceRuleFor(lowerName, lowerUnit);
    if (rule == null || rule.gramsPerUnit <= 0) return null;
    if (isPieceUnit(lowerUnit)) {
      return grams / rule.gramsPerUnit;
    }
    return null;
  }

  /// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ unit ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö rule ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool unitMatchesRule(String unit, PieceUnitInfo rule) {
    final lowerUnit = _normalize(unit);
    return rule.matchesUnit(lowerUnit) ||
        rule.displayUnit.trim().toLowerCase() == lowerUnit;
  }

  /// ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏î stock ‚Äî ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ä‡∏¥‡πâ‡∏ô (‡∏´‡∏±‡∏ß, ‡∏•‡∏π‡∏Å, ‡∏ü‡∏≠‡∏á) ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏±‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  /// üî• Normalize ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏±‡∏° ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏±‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  static double toGramsIfPiece(
    double amount,
    String unit,
    String ingredientName,
  ) {
    final lowerUnit = _normalize(unit);

    // ‚ùå ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏±‡∏°‡πÄ‡∏™‡∏°‡∏≠
    if (lowerUnit.contains('‡∏Å‡∏¥‡πÇ‡∏•') ||
        lowerUnit == 'kg' ||
        lowerUnit == 'kgs' ||
        lowerUnit == 'kg.' ||
        lowerUnit == 'kilogram' ||
        lowerUnit == 'kilograms' ||
        lowerUnit == '‡∏Å‡∏Å' ||
        lowerUnit == '‡∏Å‡∏Å.') {
      return roundGrams(amount * MeasurementConstants.gramsPerKilogram);
    }
    if (lowerUnit.contains('‡∏Å‡∏£‡∏±‡∏°') ||
        lowerUnit == 'g' ||
        lowerUnit == 'g.' ||
        lowerUnit == 'gram' ||
        lowerUnit == 'grams' ||
        lowerUnit == 'gm' ||
        lowerUnit == 'gms' ||
        lowerUnit == '‡∏Å‡∏£‡∏±‡∏°.') {
      return roundGrams(amount);
    }
    if (lowerUnit == 'mg' ||
        lowerUnit == 'mg.' ||
        lowerUnit == 'milligram' ||
        lowerUnit == 'milligrams' ||
        lowerUnit == '‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏°') {
      return roundGrams(amount / MeasurementConstants.milligramsPerGram);
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ä‡∏¥‡πâ‡∏ô ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏±‡∏°
    if (isPieceUnit(unit)) {
      final grams = gramsFromPiece(amount, unit, ingredientName);
      if (grams != null && grams > 0) return grams;
    }

    return amount;
  }

  /// ‚úÖ ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏±‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°)
  static double roundGrams(double grams) {
    if (!grams.isFinite) return grams;
    final rounded = grams.round();
    return rounded.toDouble();
  }
}

class SmartUnitResult {
  final double amount;
  final String unit;
  const SmartUnitResult(this.amount, this.unit);
}
