// lib/rawmaterial/screens/shopping_list_screen.dart — รายการวัตถุดิบ: ค้นหา/กรอง/หมวด/สแกน/เพิ่ม (กรองฝั่งแอปลดปัญหา index)
import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart' show FloatingHeaderSnapConfiguration;
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

import 'package:my_app/rawmaterial/addraw.dart';
import 'package:my_app/rawmaterial/barcode_scanner.dart'; // ใช้ WorkingBarcodeScanner ภายในไฟล์นี้

import 'package:my_app/rawmaterial/constants/categories.dart';
import 'package:my_app/rawmaterial/models/shopping_item.dart';

import 'package:my_app/rawmaterial/pages/item_detail_page.dart';
import 'package:my_app/rawmaterial/widgets/item_group_detail_card.dart';

import 'package:my_app/rawmaterial/widgets/shopping_item_card.dart';
import 'package:my_app/rawmaterial/widgets/grouped_item_card.dart';

// ใช้ค่านี้เป็น single source of truth สำหรับป้าย "ทั้งหมด"
const String _ALL = Categories.allLabel;

class ShoppingListScreen extends StatefulWidget {
  const ShoppingListScreen({Key? key}) : super(key: key);

  @override
  State<ShoppingListScreen> createState() => _ShoppingListScreenState();
}

class _ShoppingListScreenState extends State<ShoppingListScreen>
    with TickerProviderStateMixin {
  final _firestore = FirebaseFirestore.instance;
  final _auth = FirebaseAuth.instance;

  final _searchCtrl = TextEditingController();
  final _customDaysCtrl = TextEditingController();

  // debounce
  Timer? _searchDebounce;

  String searchQuery = ''; // เก็บเป็น lower-case เสมอ
  String selectedCategory = _ALL;

  String selectedExpiryFilter = 'ทั้งหมด';
  int? customDays;

  List<String> availableCategories = [_ALL];

  static const List<String> _expiryOptions = <String>[
    'ทั้งหมด',
    '1 วัน',
    '2 วัน',
    '3 วัน',
    '7 วัน',
    '14 วัน',
    'กำหนดเอง…',
  ];

  User? get currentUser => _auth.currentUser;

  @override
  void initState() {
    super.initState();
    _loadAvailableCategories();
  }

  @override
  void dispose() {
    _searchDebounce?.cancel();
    _searchCtrl.dispose();
    _customDaysCtrl.dispose();
    super.dispose();
  }

  Future<void> _loadAvailableCategories() async {
    if (currentUser == null) return;
    try {
      final qs = await _firestore
          .collection('users')
          .doc(currentUser!.uid)
          .collection('raw_materials')
          .get();

      final set = <String>{_ALL};
      for (final d in qs.docs) {
        final cat = (d.data()['category'] ?? '').toString();
        if (cat.isNotEmpty) set.add(cat);
      }
      if (!mounted) return;
      setState(() {
        availableCategories = set.toList();
        if (!availableCategories.contains(selectedCategory)) {
          selectedCategory = _ALL;
        }
      });
    } catch (e) {
      debugPrint('Load categories error: $e');
    }
  }

  // ===== Quick use sheet =====
  void _showQuickUseSheet(ShoppingItem item) {
    final qtyCtrl = TextEditingController();
    String note = '';

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (_) {
        return DraggableScrollableSheet(
          initialChildSize: 0.5,
          minChildSize: 0.4,
          maxChildSize: 0.9,
          builder: (context, scrollCtrl) {
            return Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: const BorderRadius.vertical(
                  top: Radius.circular(20),
                ),
                boxShadow: [BoxShadow(color: Colors.black12, blurRadius: 12)],
              ),
              child: Padding(
                padding: EdgeInsets.only(
                  left: 16,
                  right: 16,
                  top: 12,
                  bottom: MediaQuery.of(context).viewInsets.bottom + 16,
                ),
                child: SingleChildScrollView(
                  controller: scrollCtrl,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Center(
                        child: Container(
                          width: 44,
                          height: 5,
                          margin: const EdgeInsets.only(bottom: 12),
                          decoration: BoxDecoration(
                            color: Colors.grey[300],
                            borderRadius: BorderRadius.circular(3),
                          ),
                        ),
                      ),
                      Text(
                        'ใช้วัตถุดิบ: ${item.name}',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 12),
                      Row(
                        children: [
                          Expanded(
                            child: TextField(
                              controller: qtyCtrl,
                              keyboardType: TextInputType.number,
                              decoration: InputDecoration(
                                labelText: 'จำนวนที่ใช้',
                                isDense: true,
                                filled: true,
                                fillColor: Colors.grey[50],
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide(
                                    color: Colors.grey[300]!,
                                  ),
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 8),
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 10,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.grey[100],
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey[300]!),
                            ),
                            child: Text(
                              item.unit,
                              style: const TextStyle(
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 10),
                      TextField(
                        onChanged: (v) => note = v,
                        decoration: InputDecoration(
                          labelText: 'หมายเหตุ (ไม่บังคับ)',
                          isDense: true,
                          filled: true,
                          fillColor: Colors.grey[50],
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(color: Colors.grey[300]!),
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.yellow[300],
                            foregroundColor: Colors.black,
                            padding: const EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            elevation: 0,
                          ),
                          onPressed: () async {
                            final useQty =
                                int.tryParse(qtyCtrl.text.trim()) ?? 0;
                            if (useQty <= 0) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text(
                                    'กรุณาใส่จำนวนที่ใช้ให้ถูกต้อง',
                                  ),
                                ),
                              );
                              return;
                            }

                            try {
                              final user = _auth.currentUser;
                              if (user == null) return;

                              final docRef = _firestore
                                  .collection('users')
                                  .doc(user.uid)
                                  .collection('raw_materials')
                                  .doc(item.id);

                              await docRef.collection('usage_logs').add({
                                'quantity': useQty,
                                'unit': item.unit,
                                'note': note,
                                'used_at': FieldValue.serverTimestamp(),
                              });

                              final newQty = (item.quantity - useQty) < 0
                                  ? 0
                                  : (item.quantity - useQty);
                              await docRef.update({
                                'quantity': newQty,
                                'updated_at': FieldValue.serverTimestamp(),
                              });

                              if (!mounted) return;
                              Navigator.pop(context, true);

                              Future.microtask(() {
                                if (mounted) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    SnackBar(
                                      content: Text(
                                        'บันทึกการใช้แล้ว - เหลือ $newQty ${item.unit}',
                                      ),
                                      behavior: SnackBarBehavior.floating,
                                    ),
                                  );
                                }
                              });
                            } catch (e) {
                              if (mounted) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text('บันทึกไม่สำเร็จ: $e'),
                                  ),
                                );
                              }
                            }
                          },
                          child: const Text(
                            'บันทึกการใช้',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        );
      },
    ).whenComplete(() {
      qtyCtrl.dispose();
    });
  }

  // ===== Custom days dialog =====
  void _showCustomDaysDialog() {
    _customDaysCtrl.text = (customDays ?? 0).toString();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (_) => Dialog(
        backgroundColor: Colors.transparent,
        child: Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 20,
                offset: const Offset(0, 10),
              ),
            ],
          ),
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.yellow[300]!.withOpacity(0.3),
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Icon(
                      Icons.edit_calendar_rounded,
                      size: 28,
                      color: Colors.yellow[700],
                    ),
                  ),
                  const SizedBox(width: 16),
                  const Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'กำหนดจำนวนวัน',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.black,
                          ),
                        ),
                        Text(
                          'ระบุจำนวนวันที่ต้องการ',
                          style: TextStyle(color: Colors.black54),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Container(
                decoration: BoxDecoration(
                  color: Colors.grey[50],
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: Colors.grey[200]!),
                ),
                child: TextField(
                  controller: _customDaysCtrl,
                  keyboardType: TextInputType.number,
                  textAlign: TextAlign.center,
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                  ),
                  decoration: InputDecoration(
                    hintText: '0',
                    hintStyle: TextStyle(color: Colors.grey[400], fontSize: 24),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: 20,
                      vertical: 20,
                    ),
                    suffixIcon: Padding(
                      padding: const EdgeInsets.only(right: 20),
                      child: Center(
                        child: Text(
                          'วัน',
                          style: TextStyle(
                            color: Colors.grey[600],
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ),
                  ),
                  autofocus: true,
                ),
              ),
              const SizedBox(height: 12),
              Wrap(
                spacing: 8,
                runSpacing: 8,
                children: [1, 3, 7, 14, 30].map((d) {
                  return InkWell(
                    onTap: () => _customDaysCtrl.text = d.toString(),
                    borderRadius: BorderRadius.circular(20),
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 8,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.yellow[300]!.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(20),
                        border: Border.all(color: Colors.yellow[400]!),
                      ),
                      child: Text(
                        '$d วัน',
                        style: TextStyle(
                          color: Colors.yellow[700],
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  );
                }).toList(),
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: TextButton(
                      onPressed: () => Navigator.pop(context),
                      style: TextButton.styleFrom(
                        backgroundColor: Colors.grey[100],
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: const Text(
                        'ยกเลิก',
                        style: TextStyle(
                          color: Colors.black54,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 10),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        final days = int.tryParse(_customDaysCtrl.text);
                        if (days != null && days > 0) {
                          setState(() {
                            customDays = days;
                            selectedExpiryFilter = 'กำหนดเอง';
                          });
                          Navigator.pop(context);
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: const Row(
                                children: [
                                  Icon(Icons.check_circle, color: Colors.white),
                                  SizedBox(width: 8),
                                  Text('กรองวัตถุดิบตามวันที่กำหนดเองแล้ว'),
                                ],
                              ),
                              backgroundColor: Colors.green[600],
                              behavior: SnackBarBehavior.floating,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              margin: const EdgeInsets.all(16),
                            ),
                          );
                        } else {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: const Row(
                                children: [
                                  Icon(Icons.error, color: Colors.white),
                                  SizedBox(width: 8),
                                  Text('กรุณาใส่จำนวนวันที่ถูกต้อง'),
                                ],
                              ),
                              backgroundColor: Colors.red[600],
                              behavior: SnackBarBehavior.floating,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              margin: const EdgeInsets.all(16),
                            ),
                          );
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.yellow[300],
                        foregroundColor: Colors.black,
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        elevation: 0,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.check_rounded),
                          SizedBox(width: 8),
                          Text(
                            'ยืนยัน',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  // ===== Navigation =====
  void _goAddRaw() {
    if (currentUser == null) return;
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const AddRawMaterialPage()),
    ).then((_) {
      _loadAvailableCategories();
      if (mounted) setState(() {});
    });
  }

  void _goScan() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => WorkingBarcodeScanner()),
    );
    if (result is Map<String, dynamic>) {
      final barcode = result['barcode'] ?? '';
      final Map<String, dynamic>? productData = result['productData'];
      // ignore: use_build_context_synchronously
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (_) => AddRawMaterialPage(
            scannedBarcode: barcode,
            scannedProductData: productData,
          ),
        ),
      ).then((_) {
        _loadAvailableCategories();
        if (mounted) setState(() {});
      });
    }
  }

  // ===== Streams (ทำ filter ที่ server) =====
  Stream<QuerySnapshot<Map<String, dynamic>>> _streamItems() {
    if (currentUser == null) return const Stream.empty();
    // ดึงทั้งหมด แล้วกรอง/เรียงที่ฝั่งแอป แก้ปัญหากดเลือกหมวดหมู่แล้วว่างจาก composite index
    return _firestore
        .collection('users')
        .doc(currentUser!.uid)
        .collection('raw_materials')
        .snapshots();
  }

  Stream<QuerySnapshot<Map<String, dynamic>>> _streamCount() {
    if (currentUser == null) return const Stream.empty();
    return _firestore
        .collection('users')
        .doc(currentUser!.uid)
        .collection('raw_materials')
        .snapshots();
  }

  // ===== Mutations =====
  Future<void> _deleteGroupItems(List<ShoppingItem> items) async {
    if (currentUser == null || items.isEmpty) return;
    try {
      // Firestore จำกัด ~500 ops ต่อ batch → แบ่งก้อนกันพลาด
      const chunkSize = 450;
      for (var i = 0; i < items.length; i += chunkSize) {
        final chunk = items.sublist(i, (i + chunkSize).clamp(0, items.length));
        var batch = _firestore.batch();
        for (final it in chunk) {
          final ref = _firestore
              .collection('users')
              .doc(currentUser!.uid)
              .collection('raw_materials')
              .doc(it.id);
          batch.delete(ref);
        }
        await batch.commit();
      }

      await _loadAvailableCategories();
      if (mounted) {
        setState(() {});
        final removed = items.length;
        final preview = items.take(3).map((e) => e.name).join(', ');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              removed <= 3
                  ? 'ลบกลุ่มแล้ว: $preview'
                  : 'ลบกลุ่มแล้ว $removed รายการ (เช่น $preview...)',
            ),
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ลบกลุ่มไม่สำเร็จ: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _deleteItem(String id) async {
    if (currentUser == null) return;
    try {
      await _firestore
          .collection('users')
          .doc(currentUser!.uid)
          .collection('raw_materials')
          .doc(id)
          .delete();
      await _loadAvailableCategories();
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('เกิดข้อผิดพลาดในการลบรายการ'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // ===== Build =====
  @override
  Widget build(BuildContext context) {
    final themeGrey = Colors.grey[100];

    return Scaffold(
      backgroundColor: themeGrey,
      body: NestedScrollView(
        headerSliverBuilder: (context, innerScrolled) => [
          // 1) AppBar + แถวค้นหา/กรอง (ตรึงไว้ตลอด)
          SliverAppBar(
            backgroundColor: Colors.white,
            elevation: 0,
            pinned: true,
            floating: false,
            snap: false,
            title: Row(
              children: [
                const Text(
                  'วัตถุดิบ',
                  style: TextStyle(
                    color: Colors.black,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
                  stream: _streamCount(),
                  builder: (_, s) {
                    final cnt = s.hasData ? s.data!.docs.length : 0;
                    return Text(
                      '$cnt ชิ้น',
                      style: TextStyle(color: Colors.grey[600], fontSize: 16),
                    );
                  },
                ),
              ],
            ),
            bottom: PreferredSize(
              preferredSize: const Size.fromHeight(72), // เหลือเฉพาะค้นหา/กรอง
              child: Column(
                children: [
                  // ===== ค้นหา + ตัวกรองหมดอายุ =====
                  Container(
                    color: Colors.white,
                    padding: const EdgeInsets.fromLTRB(12, 8, 12, 8),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _searchCtrl,
                            keyboardType: TextInputType.text,
                            textInputAction: TextInputAction.search,
                            style: const TextStyle(fontSize: 14),
                            decoration: InputDecoration(
                              isDense: true,
                              hintText: 'ค้นหาวัตถุดิบ',
                              hintStyle: TextStyle(color: Colors.grey[400]),
                              contentPadding: const EdgeInsets.symmetric(
                                horizontal: 12,
                                vertical: 10,
                              ),
                              prefixIcon: Icon(
                                Icons.search,
                                color: Colors.grey[400],
                                size: 20,
                              ),
                              suffixIcon: searchQuery.isNotEmpty
                                  ? IconButton(
                                      icon: Icon(
                                        Icons.clear,
                                        color: Colors.grey[400],
                                        size: 20,
                                      ),
                                      onPressed: () {
                                        _searchCtrl.clear();
                                        setState(() => searchQuery = '');
                                      },
                                    )
                                  : null,
                              filled: true,
                              fillColor: Colors.grey[50],
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(22),
                                borderSide: BorderSide(
                                  color: Colors.yellow[600]!,
                                ),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(22),
                                borderSide: BorderSide(
                                  color: Colors.yellow[700]!,
                                  width: 2,
                                ),
                              ),
                            ),
                            onChanged: (v) {
                              _searchDebounce?.cancel();
                              _searchDebounce = Timer(
                                const Duration(milliseconds: 250),
                                () {
                                  if (!mounted) return;
                                  setState(
                                    () => searchQuery = v.trim().toLowerCase(),
                                  );
                                },
                              );
                            },
                          ),
                        ),
                        const SizedBox(width: 8),
                        // ปุ่มตัวกรองวันหมดอายุ
                        Container(
                          decoration: BoxDecoration(
                            color: selectedExpiryFilter == 'ทั้งหมด'
                                ? Colors.grey[100]
                                : Colors.yellow[300],
                            border: Border.all(
                              color: selectedExpiryFilter == 'ทั้งหมด'
                                  ? Colors.grey[400]!
                                  : Colors.yellow[600]!,
                              width: 1.5,
                            ),
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child: PopupMenuButton<String>(
                            tooltip:
                                'กรองตามวันหมดอายุ (จะแสดงเรียงใกล้หมดอายุก่อน)',
                            offset: const Offset(0, 40),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 10,
                                vertical: 8,
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(
                                    Icons.schedule_rounded,
                                    color: selectedExpiryFilter == 'ทั้งหมด'
                                        ? Colors.grey[600]
                                        : Colors.black,
                                    size: 18,
                                  ),
                                  const SizedBox(width: 6),
                                  Text(
                                    selectedExpiryFilter == 'ทั้งหมด'
                                        ? 'หมดอายุ'
                                        : (selectedExpiryFilter == 'กำหนดเอง'
                                              ? 'หมดอายุ (${customDays ?? 0} วัน)'
                                              : 'หมดอายุ: $selectedExpiryFilter'),
                                    style: TextStyle(
                                      color: selectedExpiryFilter == 'ทั้งหมด'
                                          ? Colors.grey[600]
                                          : Colors.black,
                                      fontWeight: FontWeight.w700,
                                      fontSize: 13,
                                    ),
                                  ),
                                  Icon(
                                    Icons.arrow_drop_down,
                                    color: selectedExpiryFilter == 'ทั้งหมด'
                                        ? Colors.grey[600]
                                        : Colors.black,
                                  ),
                                ],
                              ),
                            ),
                            itemBuilder: (_) => _expiryOptions.map((opt) {
                              final isCustom = opt == 'กำหนดเอง…';
                              final isSelected = isCustom
                                  ? selectedExpiryFilter == 'กำหนดเอง'
                                  : selectedExpiryFilter == opt;
                              final label =
                                  (isCustom &&
                                      selectedExpiryFilter == 'กำหนดเอง' &&
                                      customDays != null)
                                  ? 'กำหนดเอง (${customDays} วัน)'
                                  : opt;
                              return PopupMenuItem<String>(
                                value: opt,
                                child: Row(
                                  children: [
                                    if (isSelected)
                                      const Icon(
                                        Icons.check,
                                        size: 18,
                                        color: Colors.black,
                                      )
                                    else
                                      const SizedBox(width: 18),
                                    const SizedBox(width: 6),
                                    Text(label),
                                  ],
                                ),
                              );
                            }).toList(),
                            onSelected: (val) {
                              if (val == 'กำหนดเอง…') {
                                _showCustomDaysDialog();
                              } else {
                                setState(() {
                                  selectedExpiryFilter = val;
                                  if (val != 'กำหนดเอง') customDays = null;
                                });
                              }
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),

          // 2) หัวแถบหมวดหมู่แบบลอย + snap (ซ่อนเมื่อเลื่อนลง, โผล่เมื่อเลื่อนขึ้น)
          SliverPersistentHeader(
            floating: true,
            pinned: false,
            delegate: _CategoryHeaderDelegate(
              vsync:
                  this, // <- ใช้ this จาก State ที่มี TickerProviderStateMixin
              minHeight: 56,
              maxHeight: 56,
              categories: availableCategories,
              selected: selectedCategory,
              onSelect: (c) => setState(() => selectedCategory = c),
            ),
          ),
        ],
        body: StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
          stream: _streamItems(),
          builder: (_, snap) {
            if (snap.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }
            if (snap.hasError) {
              return Center(
                child: Text(
                  'เกิดข้อผิดพลาด: ${snap.error}',
                  style: const TextStyle(color: Colors.red),
                  textAlign: TextAlign.center,
                ),
              );
            }
            if (!snap.hasData || snap.data!.docs.isEmpty) {
              return _emptyState();
            }

            var all = snap.data!.docs
                .map(
                  (d) => ShoppingItem.fromMap(
                    d.data() as Map<String, dynamic>,
                    d.id,
                  ),
                )
                .toList(growable: false);
            // ซ่อนรายการที่จำนวนคงเหลือเป็น 0
            all = all.where((it) => it.quantity > 0).toList(growable: false);

            // ===== กรองที่ฝั่งแอป เพื่อลดปัญหา composite index =====
            List<ShoppingItem> filtered = List.of(all);

            // กรองหมวดหมู่
            if (selectedCategory != _ALL) {
              filtered = filtered
                  .where((it) => (it.category) == selectedCategory)
                  .toList();
            }

            // กรองคำค้นหา
            if (searchQuery.isNotEmpty) {
              filtered = filtered
                  .where((it) => it.name.toLowerCase().contains(searchQuery))
                  .toList();
            }

            // กรองวันหมดอายุ
            DateTime strip(DateTime d) => DateTime(d.year, d.month, d.day);
            final today = strip(DateTime.now());
            DateTime? from;
            DateTime? to;

            switch (selectedExpiryFilter) {
              case '1 วัน':
                from = today;
                to = today.add(const Duration(days: 1));
                break;
              case '2 วัน':
                from = today;
                to = today.add(const Duration(days: 2));
                break;
              case '3 วัน':
                from = today;
                to = today.add(const Duration(days: 3));
                break;
              case '7 วัน':
                from = today.add(const Duration(days: 4));
                to = today.add(const Duration(days: 7));
                break;
              case '14 วัน':
                from = today.add(const Duration(days: 8));
                to = today.add(const Duration(days: 14));
                break;
              case 'กำหนดเอง':
                if (customDays != null) {
                  from = today.add(Duration(days: customDays!));
                  to = from;
                }
                break;
              default:
                break; // 'ทั้งหมด'
            }

            if (from != null && to != null) {
              filtered = filtered.where((it) {
                final ed = it.expiryDate;
                if (ed == null) return false;
                final only = strip(ed);
                final geFrom = !only.isBefore(from!);
                final leTo = !only.isAfter(to!);
                return geFrom && leTo;
              }).toList();
            }

            // เรียงใกล้หมดอายุก่อน (null ไปท้าย)
            filtered.sort((a, b) {
              final ad = a.expiryDate;
              final bd = b.expiryDate;
              if (ad == null && bd == null) return 0;
              if (ad == null) return 1;
              if (bd == null) return -1;
              return ad.compareTo(bd);
            });

            if (filtered.isEmpty) {
              return _emptyAfterFilter();
            }

            // กลุ่มตามชื่อ (key เป็น lower-case เพื่อรวมชื่อซ้ำ)
            final Map<String, List<ShoppingItem>> grouped = {};
            for (final it in filtered) {
              final key = it.name.trim().toLowerCase();
              grouped.putIfAbsent(key, () => []).add(it);
            }

            final entries = grouped.entries.toList(growable: false);

            return ListView.builder(
              padding: const EdgeInsets.only(bottom: 120),
              itemCount: entries.length,
              cacheExtent: 600,
              itemBuilder: (_, idx) {
                final e = entries[idx];
                final groupItems = e.value;
                if (groupItems.length == 1) {
                  final item = groupItems.first;
                  return KeyedSubtree(
                    key: ValueKey(item.id),
                    child: ShoppingItemCard(
                      item: item,
                      onDelete: () => _deleteItem(item.id),
                      onTap: () async {
                        final changed = await Navigator.push<bool>(
                          context,
                          MaterialPageRoute(
                            builder: (_) => ItemDetailPage(item: item),
                          ),
                        );
                        if (changed == true && mounted) setState(() {});
                      },
                      onQuickUse: () => _showQuickUseSheet(item),
                    ),
                  );
                } else {
                  final displayName = groupItems.first.name;
                  return KeyedSubtree(
                    key: ValueKey('group-${e.key}'),
                    child: GroupedItemCard(
                      name: displayName,
                      items: groupItems,
                      onTap: () async {
                        final changed = await showModalBottomSheet<bool>(
                          context: context,
                          isScrollControlled: true,
                          backgroundColor: Colors.transparent,
                          builder: (_) => SizedBox(
                            height: MediaQuery.of(context).size.height * 0.9,
                            child: ItemGroupDetailSheet(
                              groupName: displayName,
                              items: groupItems,
                            ),
                          ),
                        );
                        if (changed == true && mounted) setState(() {});
                      },
                      // ✅ ผูกการลบทั้งกลุ่ม
                      onDeleteGroup: () => _deleteGroupItems(groupItems),
                    ),
                  );
                }
              },
            );
          },
        ),
      ),

      // FAB: Write & Scan
      floatingActionButton: Container(
        decoration: BoxDecoration(
          color: Colors.yellow[700],
          borderRadius: BorderRadius.circular(30),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextButton.icon(
              onPressed: _goAddRaw,
              icon: const Icon(Icons.edit, color: Colors.black),
              label: const Text(
                'Write',
                style: TextStyle(
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                  fontSize: 14,
                ),
              ),
            ),
            const SizedBox(width: 8),
            TextButton.icon(
              onPressed: _goScan,
              icon: const Icon(
                FontAwesomeIcons.barcode,
                size: 20,
                color: Colors.black,
              ),
              label: const Text(
                'Scan',
                style: TextStyle(
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                  fontSize: 14,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // ===== Small helpers =====
  Widget _emptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.inventory_2_outlined, size: 80, color: Colors.grey[400]),
          const SizedBox(height: 12),
          Text(
            'ไม่มีรายการวัตถุดิบ',
            style: TextStyle(color: Colors.grey[600]),
          ),
        ],
      ),
    );
  }

  Widget _emptyAfterFilter() {
    final text = (selectedExpiryFilter != 'ทั้งหมด')
        ? 'ไม่มีวัตถุดิบที่หมดอายุใน${selectedExpiryFilter == 'กำหนดเอง' ? '$customDays วัน' : selectedExpiryFilter}'
        : (searchQuery.isNotEmpty ? 'ไม่พบรายการที่ค้นหา' : 'ไม่มีรายการ');

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            selectedExpiryFilter != 'ทั้งหมด'
                ? Icons.schedule
                : Icons.search_off,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 12),
          Text(text, style: TextStyle(color: Colors.grey[600])),
          if (searchQuery.isNotEmpty)
            Padding(
              padding: const EdgeInsets.only(top: 6),
              child: Text(
                'คำค้นหา: "$searchQuery"',
                style: TextStyle(color: Colors.grey[500]),
              ),
            ),
        ],
      ),
    );
  }
}

// ===== SliverPersistentHeader delegate สำหรับ "แถบหมวดหมู่" ที่ลอย+snap =====
class _CategoryHeaderDelegate extends SliverPersistentHeaderDelegate {
  _CategoryHeaderDelegate({
    required TickerProvider vsync,
    required this.maxHeight,
    required this.minHeight,
    required this.categories,
    required this.selected,
    required this.onSelect,
  }) : _vsync = vsync;

  // เก็บไว้เป็น private เพื่อไม่ชนกับ getter override
  final TickerProvider _vsync;

  final double maxHeight;
  final double minHeight;
  final List<String> categories;
  final String selected;
  final ValueChanged<String> onSelect;

  @override
  double get maxExtent => maxHeight;

  @override
  double get minExtent => minHeight;

  // ✅ สำคัญ: ต้อง override ให้คืน TickerProvider ที่ส่งเข้ามา
  @override
  TickerProvider get vsync => _vsync;

  @override
  Widget build(
    BuildContext context,
    double shrinkOffset,
    bool overlapsContent,
  ) {
    return Material(
      color: Colors.white,
      elevation: overlapsContent ? 1 : 0,
      child: SizedBox(
        height: maxExtent,
        child: ListView.builder(
          scrollDirection: Axis.horizontal,
          padding: const EdgeInsets.symmetric(horizontal: 16),
          itemCount: categories.length,
          itemBuilder: (_, idx) {
            final c = categories[idx];
            final isSelected = selected == c;
            return GestureDetector(
              onTap: () => onSelect(c),
              child: Container(
                margin: const EdgeInsets.only(right: 12, top: 8, bottom: 8),
                padding: const EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 8,
                ),
                decoration: BoxDecoration(
                  color: isSelected ? Colors.yellow[600] : Colors.grey[200],
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Center(
                  child: Text(
                    c,
                    style: TextStyle(
                      color: isSelected ? Colors.white : Colors.grey[600],
                      fontWeight: isSelected
                          ? FontWeight.bold
                          : FontWeight.normal,
                    ),
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  // ทำให้หัวนี้ snap ตอนลอย
  @override
  FloatingHeaderSnapConfiguration? get snapConfiguration =>
      FloatingHeaderSnapConfiguration(vsync);

  @override
  bool shouldRebuild(covariant _CategoryHeaderDelegate old) {
    return old.categories != categories ||
        old.selected != selected ||
        old.maxHeight != maxHeight ||
        old.minHeight != minHeight;
  }
}
